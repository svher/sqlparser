package sqlparser

import (
	"encoding/json"
	"testing"
)

func TestRewriteEdgeSqls(t *testing.T) {
	typeMap := map[string]map[string]string{
		"shop_sim": {
			"order_rate_weight": "double",
		},
		"sim_author": {
			"order_rate_weight": "double",
			"property2":         "double",
		},
	}
	rewritten, err := RewriteSqls(`SELECT  DISTINCT point1_id,
        point2_id,
        point1_type,
        point2_type,
        value,
        ts_us,
        edge_type,
        cast(order_rate_weight as float),
		low_score_author_cnt
FROM    (
        SELECT  src AS point1_id,
                tgt AS point2_id,
                'shop' AS point1_type,
                'sim' AS point2_type,
                '' AS value,
                (UNIX_TIMESTAMP() * 1000000) AS ts_us,
                'shop_sim' AS edge_type,
               ratio_src AS order_rate_weight
        FROM    dm_temai.shop_gandalf_v1_3_graph_structure_di
        WHERE   date = max_pt('dm_temai.shop_gandalf_v1_3_graph_structure_di')
        AND     edge_type = 'shop_sell_sim_1d'
        ) a;

SELECT  DISTINCT point1_id,
        point2_id,
        point1_type,
        point2_type,
        value,
        ts_us,
        edge_type,
        cast(order_rate_weight as double),
        property2
FROM    (
        SELECT  src AS point2_id,
                tgt AS point1_id,
                'author' AS point2_type,
                'sim' AS point1_type,
                '' AS value,
                (UNIX_TIMESTAMP() * 1000000) AS ts_us,
                'sim_author' AS edge_type,
                ratio_src AS order_rate_weight,
                'prop' AS property2
        FROM    dm_temai.shop_gandalf_v1_3_graph_structure_di
        WHERE   date = max_pt('dm_temai.shop_gandalf_v1_3_graph_structure_di')
        AND     edge_type = 'author_sell_sim_1d'
        ) a;`, false, typeMap)
	if err != nil {
		t.Fatalf("RewriteSqls error: %v", err)
	}
	if len(rewritten) != 2 {
		t.Fatalf("expected 2 rewritten sqls, got %d", len(rewritten))
	}

	buffer, _ := json.MarshalIndent(rewritten, "", "  ")
	t.Log("\n" + string(buffer))
}

func TestRewritePointSql(t *testing.T) {
	rewritten, err := RewriteSqls(`SELECT
  author_id as point_id,
  'author' as point_type,
  author_id as point_value,
  avg_order_price_1d,
  cast(max_first_cid_new as double),
  cast(main_second_cid_new as double),
  city_resident,
  author_label,
  is_institution_author,
  life_stage_label,
  cast(is_buyin_settled as double),
  cast(user_rate as int),
  is_bluev,
  cast(cert_classify as double),
  author_identity,
  amt_top1_industry_cate_30d,
  top1_first_name,
  authority_type,
  age,
  final_score_feature,
  fusion_goods_score,
  fusion_logistics_score,
  fusion_service_score,
  fans_num,
  author_level,
  author_max_level,
  author_last_level,
  gender,
  cl_amt_30d,
  cl_order_cnt_30d,
  first_cl_order_age,
  first_cl_live_order_age,
  first_ecom_video_age,
  first_ecom_live_age,
  last_ec_authority_age,
  first_ec_authority_age,
  first_ec_live_authority_age,
  last_ec_live_authority_age,
  ecom_video_cnt_30d,
  credit_score,
  author_violation_cnt,
  account_shop_sale_product_cnt,
  in_bind_sale_product_cnt,
  deduct_credit_score_pcm,
  trading_reputate_score_pcm,
  last_room_pay_amt,
  cast(last_room_live_dur as double),
  last_room_watch_cnt_per_hr,
  cast(last3_avg_live_dur as double),
  last3_avg_pay_amt,
  cast(last3_avg_watch_cnt_per_hr as double),
  last3_gpm_per_hr,
  max_pay_amt_room_pay_amt,
  cast(max_pay_amt_room_live_dur as double),
  cast(max_pay_amt_room_watch_cnt_per_hr as double),
  cast(max_pay_amt_room_pay_ord_cnt as double),
  cast(max_pay_amt_room_pay_ucnt as double),
  cast(age_days as double),
  cast(user_create_day_cnt as double),
  cast(fans_num_increase_1d as double),
  cast(fans_num_increase_3d as double),
  cast(fans_num_increase_7d as double),
  cast(first_ec_days as double),
  cast(last_ec_days as double),
  live_report_per_uv_3d,
  cast(live_report_uv_7d as double),
  live_report_per_uv_7d,
  cast(live_report_pv_7d as double),
  cast(live_report_uv_30d as double),
  cast(live_report_per_uv_30d as double),
  cast(live_report_pv_30d as double),
  play_time_1d,
  use_time_1d,
  cast(session_cnt_1d as double),
  cast(comment_cnt_1d as double),
  cast(share_video_cnt_1d as double),
  cast(browser_vv_3d as double),
  cast(browser_uvv_3d as double),
  cast(play_time_3d as double),
  cast(use_time_3d as double),
  cast(session_cnt_3d as double),
  cast(finish_vv_3d as double),
  cast(finish_uvv_3d as double),
  cast(feed_vv_3d as double),
  cast(feed_uvv_3d as double),
  cast(like_cnt_3d as double),
  cast(comment_cnt_3d as double),
  cast(follow_cnt_3d as double),
  cast(download_cnt_3d as double),
  cast(download_video_num_3d as double),
  cast(share_video_cnt_3d as double),
  cast(publish_cnt_3d as double),
  cast(publish_cnt_all as double),
  cast(uid_province_cnt_3m as double),
  cast(uid_max_user_date_cnt_3m as double),
  cast(uid_login_cnt_3m as double),
  cast(uid_unsafe_login_cnt_3m as double),
  cast(uid_unsafe_login_rate_3m as double),
  cast(uid_login_date_cnt_3m as double),
  cast(uid_unsafe_login_date_cnt_3m as double),
  cast(uid_unsafe_login_date_rate_3m as double),
  cast(uid_login_ip_cnt_3m as double),
  cast(uid_login_device_cnt_3m as double),
  cast(uid_new_device_sum_cnt_3m as double),
  cast(sell_product_cnt as double),
  now_bind_product_ratio,
  self_sell_product_ratio,
  no_bind_product_ratio,
  avg_cos_ratio,
  max_cos_ratio,
  min_cos_ratio,
  avg_cos_fee,
  cast(max_cos_fee as double),
  cast(min_cos_fee as double),
  cast(first_pick_product_cnt as double),
  cast(max_day_diff_1 as double),
  cast(min_day_diff_1 as double),
  avg_day_diff_1,
  stddev_day_diff_1,
  cast(max_day_diff_2 as double),
  cast(min_day_diff_2 as double),
  cast(avg_day_diff_2 as double),
  cast(stddev_day_diff_2 as double),
  cast(link_add_ratio as double),
  cast(search_add_ratio as double),
  cast(max_sku_cnt as double),
  cast(min_sku_cnt as double),
  cast(avg_sku_cnt as double),
  cast(stddev_sku_cnt as double),
  cast(avg_max_price as double),
  cast(avg_min_price as double),
  cast(max_sell_product_cnt as double),
  cast(min_sell_product_cnt as double),
  cast(avg_sell_product_cnt as double),
  cast(stddev_sell_product_cnt as double),
  cast(more_bad_product_ratio_1 as double),
  cast(more_bad_product_ratio_2 as double),
  cast(more_good_product_ratio_1 as double),
  cast(selled_product_cnt as double),
  cast(order_cnt_total as double),
  cast(comment_cnt_total as double),
  cast(max_selled_author_cnt as double),
  avg_selled_author_cnt,
  cast(bad_comment_cnt_total as double),
  cast(bad_comment_ratio_total as double),
  cast(max_bad_comment_ratio as double),
  cast(sttdev_bad_comment_ratio as double),
  cast(quality_refunded_cnt_total as double),
  cast(max_quality_refunded_ratio as double),
  cast(sttdev_quality_refunded_ratio as double),
  cast(refunded_cnt_total as double),
  cast(max_refunded_ratio as double),
  cast(sttdev_refunded_ratio as double),
  cast(complaint_cnt_total as double),
  cast(complaint_ratio_total as double),
  cast(max_complaint_ratio as double),
  cast(sttdev_complaint_ratio as double),
  cast(good_comment_cnt_total as double),
  cast(good_comment_ratio_total as double),
  cast(max_good_comment_ratio as double),
  cast(sttdev_good_comment_ratio as double),
  cast(min_discount_ratio as double),
  cast(avg_discount_ratio as double),
  cast(stddev_discount_ratio as double),
  cast(high_discount_product_cnt1 as double),
  cast(high_discount_product_cnt2 as double),
  cast(hig_discount_product_ratio1 as double),
  cast(hig_discount_product_ratio2 as double),
  cast(max_compare_ratio as double),
  cast(avg_compare_ratio as double),
  cast(stddev_compare_ratio as double),
  cast(ban_product_ratio as double),
  cast(sell_new_product_ratio_1 as double),
  cast(sell_new_product_ratio_2 as double),
  cast(sell_new_product_ratio_3 as double),
  cast(max_history_bad_comment_ratio as double),
  cast(min_history_bad_comment_ratio as double),
  cast(avg_history_bad_comment_ratio as double),
  cast(stddev_history_bad_comment_ratio as double),
  cast(video_task_in_cnt_30d as double),
  cast(video_task_out_cnt_30d as double),
  cast(video_task_bad_cnt_30d as double),
  cast(video_task_fail_rate_30d as double),
  cast(live_task_in_cnt_30d as double),
  cast(live_task_out_cnt_30d as double),
  cast(live_task_bad_cnt_30d as double),
  cast(live_task_fail_rate_30d as double),
  cast(group_size_lab_prec as double),
  cast(group_size_fk_prec as double),
  cast(group_close_rate_fk_prec as double),
  cast(group_good_comment_ratio_lab_prec_90d as double),
  cast(group_complaint_ratio_lab_prec_90d as double),
  cast(group_quality_refunded_ratio_lab_prec_90d as double),
  cast(group_refunded_ratio_lab_prec_90d as double),
  cast(group_good_comment_ratio_fk_prec_90d as double),
  cast(group_bad_comment_ratio_fk_prec_90d as double),
  cast(group_complaint_ratio_fk_prec_90d as double),
  cast(group_quality_refunded_ratio_fk_prec_90d as double),
  cast(group_refunded_ratio_fk_prec_90d as double),
  cast(check_cnt_7d as double),
  cast(check_cnt_30d as double),
  cast(check_cnt_90d as double),
  cast(ggjyc_punish_30d as double),
  cast(jgxj_punish_30d as double),
  cast(xjxc_punish_30d as double),
  cast(zwyl_punish_30d as double),
  cast(fwlv_punish_30d as double),
  cast(lb_punish_30d as double),
  cast(area_bad_comment_cnt as double),
  cast(area_quality_return_cnt as double),
  cast(area_complaint_cnt as double),
  cast(area_ccr_cnt as double),
  cast(fake_return_cnt as double),
  cast(area_bad_comment_ratio as double),
  cast(area_complaint_ratio as double),
  cast(area_quality_return_ratio as double),
  cast(area_logisitcs_quality_return_ratio as double),
  cast(max_area_bad_comment_ratio as double),
  cast(max_area_complaint_ratio as double),
  cast(max_area_quality_return_ratio as double),
  cast(max_area_logisitcs_quality_return_ratio as double),
  cast(gandalf_score_avg as double),
  cast(gandalf_score_max as double),
  cast(gandalf_score_min as double),
  cast(gandalf_score_stddev as double),
  cast(gandalf_score_var as double),
  cast(ccr_pre_ratio as double),
  cast(spty_pre_ratio as double),
  cast(high_risk_score as double),
  cast(init_score as double),
  cast(report_user_cnt as double),
  cast(report_cnt as double),
  cast(lbgj_report_user_cnt as double),
  cast(jbyy_report_user_cnt as double),
  cast(kdxc_report_user_cnt as double),
  cast(xjhd_report_user_cnt as double),
  cast(xjcn_report_user_cnt as double),
  cast(smjm_report_user_cnt as double),
  cast(score as double),
  cast(lubo_score_v1 as double),
  cast(jiahuo_score_v1 as double),
  cast(gwjs_score_v1 as double),
  cast(ccr_hit_rate_30d as double),
  cast(ccr_hit_rate_14d as double),
  cast(refunded_ratio_30d as double),
  cast(quality_refunded_ratio_30d as double),
  cast(refunded_ratio_total as double),
  cast(quality_refunded_ratio_total as double),
  cast(g_ccr_hit_rate_30d as double),
  cast(g_ccr_hit_rate_14d as double),
  cast(g_refunded_ratio_30d as double),
  cast(g_quality_refunded_ratio_30d as double),
  cast(g_refunded_ratio_total as double),
  cast(g_quality_refunded_ratio_total as double),
  cast(kanbo_ccr_30d as double),
  cast(live_kanbo_ccr_30d as double),
  cast(live_report_kanbo_ccr_30d as double),
  cast(live_comment_kanbo_ccr_30d as double),
  cast(zskx_kanbo_ccr_30d as double),
  cast(jgcx_kanbo_ccr_30d as double),
  cast(kgdc_kanbo_ccr_30d as double),
  quality_return_ratio,
  close_shop_ratio_30d,
  ban_product_ratio_30d,
  second_cate_sqr_diff,
  sqr_ratio,
  second_cate_qr_diff,
  second_cate_bc_diff,
  bc_ratio,
  shop_bad_comment_ratio_30d
FROM
  dm_temai.shop_gandalf_v1_3_rt_author_feature_daliy
WHERE
  date = max_pt('dm_temai.shop_gandalf_v1_3_rt_author_feature_daliy');`, false, map[string]map[string]string{
		"group": {
			"quality_ccr_cnt_60d": "float",
		},
	})
	if err != nil {
		t.Fatalf("RewriteSqls error: %v", err)
	}
	if len(rewritten) != 1 {
		t.Fatalf("expected 1 rewritten sql, got %d", len(rewritten))
	}

	buffer, _ := json.MarshalIndent(rewritten, "", "  ")
	t.Log("\n" + string(buffer))
}
