// Code generated by goyacc -o sql.go -v sql.output sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	commonTableExpr   *CommonTableExpr
	commonTableExprs  CommonTableExprs
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const STRINGKW = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const UNIQUE = 57451
const PRIMARY = 57452
const COLUMN = 57453
const CONSTRAINT = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const MAXVALUE = 57467
const PARTITION = 57468
const REORGANIZE = 57469
const LESS = 57470
const THAN = 57471
const PROCEDURE = 57472
const TRIGGER = 57473
const VINDEX = 57474
const VINDEXES = 57475
const STATUS = 57476
const VARIABLES = 57477
const BEGIN = 57478
const START = 57479
const TRANSACTION = 57480
const COMMIT = 57481
const ROLLBACK = 57482
const BIT = 57483
const TINYINT = 57484
const SMALLINT = 57485
const MEDIUMINT = 57486
const INT = 57487
const INTEGER = 57488
const BIGINT = 57489
const INTNUM = 57490
const REAL = 57491
const DOUBLE = 57492
const FLOAT_TYPE = 57493
const DECIMAL = 57494
const NUMERIC = 57495
const TIME = 57496
const TIMESTAMP = 57497
const DATETIME = 57498
const YEAR = 57499
const CHAR = 57500
const VARCHAR = 57501
const BOOL = 57502
const CHARACTER = 57503
const VARBINARY = 57504
const NCHAR = 57505
const TEXT = 57506
const TINYTEXT = 57507
const MEDIUMTEXT = 57508
const LONGTEXT = 57509
const BLOB = 57510
const TINYBLOB = 57511
const MEDIUMBLOB = 57512
const LONGBLOB = 57513
const JSON = 57514
const ENUM = 57515
const GEOMETRY = 57516
const POINT = 57517
const LINESTRING = 57518
const POLYGON = 57519
const GEOMETRYCOLLECTION = 57520
const MULTIPOINT = 57521
const MULTILINESTRING = 57522
const MULTIPOLYGON = 57523
const NULLX = 57524
const AUTO_INCREMENT = 57525
const APPROXNUM = 57526
const SIGNED = 57527
const UNSIGNED = 57528
const ZEROFILL = 57529
const DATABASES = 57530
const TABLES = 57531
const VITESS_KEYSPACES = 57532
const VITESS_SHARDS = 57533
const VITESS_TABLETS = 57534
const VSCHEMA_TABLES = 57535
const EXTENDED = 57536
const FULL = 57537
const PROCESSLIST = 57538
const NAMES = 57539
const CHARSET = 57540
const GLOBAL = 57541
const SESSION = 57542
const ISOLATION = 57543
const LEVEL = 57544
const READ = 57545
const WRITE = 57546
const ONLY = 57547
const REPEATABLE = 57548
const COMMITTED = 57549
const UNCOMMITTED = 57550
const SERIALIZABLE = 57551
const CURRENT_TIMESTAMP = 57552
const DATABASE = 57553
const CURRENT_DATE = 57554
const CURRENT_TIME = 57555
const LOCALTIME = 57556
const LOCALTIMESTAMP = 57557
const UTC_DATE = 57558
const UTC_TIME = 57559
const UTC_TIMESTAMP = 57560
const REPLACE = 57561
const CONVERT = 57562
const CAST = 57563
const SUBSTR = 57564
const SUBSTRING = 57565
const GROUP_CONCAT = 57566
const SEPARATOR = 57567
const MATCH = 57568
const AGAINST = 57569
const BOOLEAN = 57570
const LANGUAGE = 57571
const WITH = 57572
const QUERY = 57573
const EXPANSION = 57574
const UNUSED = 57575

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"STRINGKW",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 28,
	-2, 4,
	-1, 37,
	151, 269,
	152, 269,
	-2, 259,
	-1, 247,
	110, 598,
	-2, 594,
	-1, 248,
	110, 599,
	-2, 595,
	-1, 317,
	81, 757,
	-2, 64,
	-1, 318,
	81, 718,
	-2, 65,
	-1, 323,
	81, 702,
	-2, 560,
	-1, 325,
	81, 739,
	-2, 562,
	-1, 590,
	52, 47,
	54, 47,
	-2, 49,
	-1, 727,
	110, 601,
	-2, 597,
	-1, 935,
	5, 29,
	-2, 403,
	-1, 960,
	5, 28,
	-2, 535,
	-1, 1191,
	5, 29,
	-2, 536,
	-1, 1233,
	5, 28,
	-2, 538,
	-1, 1292,
	5, 29,
	-2, 539,
}

const yyPrivate = 57344

const yyLast = 11009

var yyAct = [...]int16{
	248, 1283, 875, 535, 661, 1097, 252, 789, 534, 3,
	1242, 1195, 1124, 809, 1022, 582, 1098, 584, 790, 830,
	865, 226, 58, 869, 1094, 980, 762, 466, 1068, 855,
	831, 322, 181, 158, 927, 1025, 58, 752, 277, 58,
	1013, 759, 778, 600, 968, 729, 963, 841, 419, 216,
	599, 316, 570, 480, 786, 468, 827, 221, 488, 586,
	474, 304, 909, 222, 849, 250, 235, 53, 303, 313,
	1311, 24, 278, 48, 311, 1266, 501, 500, 510, 511,
	503, 504, 505, 506, 507, 508, 509, 502, 24, 24,
	512, 1301, 24, 1309, 217, 218, 219, 220, 1232, 1290,
	1307, 550, 876, 1300, 1289, 1089, 892, 1185, 423, 1251,
	988, 55, 958, 987, 162, 959, 989, 601, 51, 602,
	891, 48, 1118, 444, 1119, 1120, 822, 48, 459, 225,
	1004, 761, 823, 824, 848, 51, 51, 223, 690, 51,
	164, 165, 166, 167, 168, 691, 1207, 896, 432, 856,
	254, 1130, 182, 1131, 1132, 1222, 805, 890, 576, 577,
	1135, 1133, 1174, 1172, 215, 425, 1306, 58, 58, 181,
	22, 455, 456, 58, 1308, 181, 1284, 1046, 449, 787,
	1243, 1249, 302, 433, 58, 426, 58, 446, 183, 448,
	184, 239, 58, 184, 1245, 58, 669, 1043, 660, 181,
	181, 181, 181, 1045, 181, 887, 884, 885, 979, 883,
	843, 181, 810, 812, 445, 447, 190, 186, 187, 188,
	843, 978, 977, 421, 58, 429, 181, 194, 185, 524,
	525, 1267, 1055, 231, 894, 897, 1053, 943, 998, 308,
	477, 921, 181, 701, 572, 575, 576, 577, 573, 245,
	574, 579, 696, 492, 969, 970, 439, 1139, 828, 502,
	512, 1244, 512, 476, 902, 698, 485, 487, 1050, 889,
	736, 450, 450, 450, 450, 779, 450, 856, 1275, 1250,
	1248, 1149, 487, 450, 734, 735, 733, 811, 966, 451,
	603, 888, 1091, 664, 1002, 443, 1044, 1278, 1042, 486,
	485, 1288, 58, 842, 48, 482, 1093, 241, 1140, 58,
	58, 58, 21, 842, 1293, 181, 487, 307, 301, 521,
	1134, 181, 523, 486, 485, 189, 1213, 578, 893, 21,
	21, 230, 779, 21, 950, 464, 1212, 435, 436, 437,
	487, 895, 427, 428, 903, 1049, 1017, 478, 1016, 533,
	1005, 538, 539, 540, 541, 542, 543, 544, 545, 546,
	1294, 549, 551, 551, 551, 551, 551, 551, 551, 551,
	559, 560, 561, 562, 843, 918, 919, 920, 452, 453,
	454, 583, 457, 1276, 597, 591, 1229, 1210, 940, 461,
	51, 462, 552, 553, 554, 555, 556, 557, 558, 1157,
	522, 732, 420, 572, 575, 576, 577, 573, 845, 574,
	579, 1014, 753, 846, 754, 578, 505, 506, 507, 508,
	509, 502, 463, 181, 512, 1297, 463, 704, 705, 58,
	58, 181, 939, 58, 938, 1273, 58, 486, 485, 1127,
	58, 1126, 181, 181, 181, 181, 181, 181, 181, 181,
	999, 486, 485, 990, 487, 878, 181, 181, 319, 307,
	755, 58, 1235, 1281, 719, 721, 722, 842, 487, 720,
	675, 678, 840, 838, 486, 485, 839, 1235, 463, 1255,
	181, 1254, 267, 266, 58, 269, 270, 271, 272, 674,
	181, 487, 268, 273, 665, 450, 1235, 1236, 706, 1204,
	1203, 1136, 676, 450, 663, 526, 527, 528, 529, 530,
	531, 532, 1115, 463, 450, 450, 450, 450, 450, 450,
	450, 450, 695, 463, 727, 1146, 1145, 964, 450, 450,
	1142, 1143, 764, 181, 730, 471, 475, 58, 523, 1142,
	1141, 933, 463, 567, 463, 708, 658, 766, 723, 441,
	771, 774, 493, 764, 463, 725, 780, 503, 504, 505,
	506, 507, 508, 509, 502, 58, 434, 512, 58, 58,
	58, 58, 58, 791, 578, 610, 609, 1095, 420, 159,
	964, 58, 566, 1189, 58, 1058, 537, 965, 58, 567,
	756, 757, 766, 58, 58, 548, 48, 181, 1148, 1144,
	776, 659, 783, 816, 319, 593, 567, 945, 817, 668,
	181, 538, 991, 821, 933, 596, 693, 942, 933, 702,
	679, 680, 681, 682, 683, 684, 685, 686, 933, 567,
	793, 794, 806, 796, 687, 688, 792, 276, 965, 795,
	308, 308, 308, 308, 308, 815, 731, 814, 819, 820,
	944, 1129, 51, 857, 858, 859, 583, 1081, 813, 835,
	941, 58, 700, 594, 181, 308, 181, 232, 1217, 179,
	58, 767, 768, 58, 181, 867, 868, 775, 850, 662,
	964, 871, 866, 851, 852, 853, 854, 870, 1109, 994,
	861, 782, 860, 784, 785, 170, 181, 181, 699, 862,
	863, 864, 969, 970, 595, 1069, 593, 873, 1095, 1018,
	972, 672, 803, 460, 51, 486, 485, 804, 307, 307,
	307, 307, 307, 801, 799, 1305, 714, 976, 802, 800,
	975, 974, 487, 727, 307, 1071, 450, 798, 450, 797,
	236, 237, 1299, 307, 728, 1054, 450, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 911, 910, 1009, 1075, 1074, 1073, 906, 1079,
	481, 1072, 730, 1070, 1304, 916, 915, 469, 1077, 923,
	608, 442, 726, 1001, 479, 1280, 1187, 1076, 1279, 470,
	1230, 995, 1218, 716, 717, 960, 880, 671, 581, 922,
	1078, 1080, 465, 233, 234, 481, 321, 914, 227, 1260,
	228, 1259, 424, 159, 181, 913, 1220, 58, 965, 483,
	949, 510, 511, 503, 504, 505, 506, 507, 508, 509,
	502, 181, 983, 512, 1268, 1208, 321, 321, 321, 321,
	973, 321, 879, 697, 881, 917, 537, 161, 321, 769,
	770, 163, 900, 592, 52, 1, 877, 1021, 694, 961,
	962, 992, 982, 467, 984, 985, 886, 1282, 1241, 707,
	1123, 837, 829, 418, 181, 181, 169, 181, 1274, 490,
	836, 1006, 1007, 1247, 731, 1206, 319, 996, 997, 308,
	844, 1003, 932, 847, 1128, 1277, 1000, 615, 613, 832,
	181, 614, 1015, 58, 58, 612, 617, 616, 947, 611,
	202, 826, 1008, 58, 1010, 1011, 1012, 314, 580, 604,
	1038, 872, 181, 484, 171, 1041, 763, 765, 1040, 882,
	1048, 689, 1024, 901, 458, 204, 520, 912, 986, 320,
	54, 224, 703, 781, 473, 1258, 1219, 450, 948, 547,
	777, 253, 321, 718, 265, 262, 264, 263, 605, 1062,
	1067, 709, 181, 181, 1061, 791, 1096, 307, 957, 1083,
	1101, 791, 450, 494, 808, 727, 251, 1082, 243, 306,
	563, 1090, 571, 1105, 924, 925, 926, 569, 1103, 1102,
	568, 726, 181, 971, 181, 181, 967, 1104, 1099, 305,
	1057, 1184, 1265, 713, 26, 160, 238, 907, 908, 19,
	475, 1121, 18, 17, 20, 16, 1116, 15, 14, 58,
	30, 13, 12, 11, 1122, 10, 9, 181, 8, 7,
	1117, 6, 1100, 5, 48, 4, 229, 23, 2, 0,
	181, 58, 0, 0, 0, 0, 0, 181, 0, 0,
	1111, 1112, 1113, 1020, 181, 0, 181, 0, 0, 58,
	321, 0, 0, 1137, 1138, 0, 0, 0, 321, 0,
	0, 0, 934, 0, 1161, 1150, 0, 0, 1047, 321,
	321, 321, 321, 321, 321, 321, 321, 951, 1152, 0,
	0, 1155, 0, 321, 321, 1169, 1170, 1168, 0, 0,
	0, 0, 0, 0, 1160, 0, 0, 0, 0, 0,
	181, 0, 181, 181, 181, 58, 181, 710, 0, 0,
	832, 1188, 181, 1197, 1198, 1199, 1194, 490, 0, 0,
	321, 308, 1200, 0, 1165, 1166, 0, 1167, 1202, 0,
	0, 0, 1171, 0, 1173, 0, 0, 930, 181, 181,
	181, 931, 992, 0, 0, 0, 0, 0, 935, 936,
	937, 0, 1183, 1215, 0, 0, 1023, 946, 0, 0,
	758, 1209, 952, 1211, 953, 954, 955, 956, 1064, 1065,
	1216, 772, 772, 0, 0, 0, 0, 772, 0, 0,
	1205, 1084, 1085, 0, 1087, 1088, 1221, 0, 0, 0,
	0, 1233, 0, 0, 772, 181, 1231, 0, 0, 307,
	0, 1060, 0, 0, 1240, 0, 0, 1246, 181, 0,
	450, 0, 0, 0, 0, 0, 0, 0, 1099, 1256,
	0, 0, 0, 1086, 321, 0, 181, 0, 1269, 200,
	0, 0, 0, 1270, 0, 0, 0, 321, 0, 0,
	0, 0, 1272, 0, 0, 0, 0, 0, 1092, 0,
	0, 0, 1100, 210, 1286, 1234, 1252, 0, 1253, 0,
	0, 1099, 0, 1106, 1107, 791, 1291, 1108, 0, 0,
	1110, 832, 0, 832, 0, 181, 1295, 0, 0, 1033,
	0, 1257, 0, 0, 0, 0, 309, 0, 1302, 1303,
	0, 321, 0, 321, 0, 1100, 0, 48, 0, 0,
	0, 321, 0, 1163, 195, 0, 0, 1031, 0, 0,
	197, 0, 0, 0, 1066, 0, 1214, 203, 199, 0,
	0, 472, 192, 904, 905, 0, 0, 0, 0, 321,
	0, 0, 0, 0, 0, 1060, 0, 0, 0, 0,
	0, 0, 0, 56, 201, 0, 0, 205, 1158, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	214, 0, 1114, 0, 0, 0, 0, 0, 0, 0,
	0, 1310, 1032, 0, 0, 196, 0, 1037, 1034, 1027,
	1028, 1035, 1030, 1029, 0, 0, 0, 0, 0, 0,
	0, 1186, 0, 0, 1036, 0, 0, 0, 537, 0,
	1039, 832, 198, 0, 206, 207, 208, 209, 213, 0,
	0, 0, 0, 212, 211, 0, 0, 0, 1223, 1224,
	0, 1225, 1226, 1227, 0, 0, 0, 0, 1023, 832,
	0, 0, 1033, 0, 0, 0, 0, 0, 0, 0,
	0, 981, 0, 1162, 0, 0, 0, 0, 0, 0,
	1164, 0, 0, 0, 312, 0, 0, 0, 321, 422,
	1031, 0, 0, 0, 1175, 1176, 1177, 0, 0, 1180,
	430, 0, 431, 0, 0, 0, 0, 0, 438, 0,
	0, 440, 1190, 1191, 1192, 1193, 242, 0, 193, 193,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 0,
	0, 1019, 321, 0, 321, 193, 0, 193, 0, 0,
	0, 0, 0, 193, 0, 0, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 1032, 0, 321, 0, 0,
	1037, 1034, 1027, 1028, 1035, 1030, 1029, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 1036, 0, 321,
	1312, 0, 0, 1026, 0, 0, 0, 1285, 537, 0,
	0, 0, 0, 0, 0, 0, 1228, 0, 0, 0,
	0, 321, 0, 0, 0, 0, 0, 0, 0, 1237,
	1238, 1239, 0, 0, 0, 0, 772, 0, 565, 467,
	981, 0, 772, 0, 0, 0, 0, 590, 0, 0,
	0, 0, 0, 0, 0, 1261, 1262, 1263, 1264, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 321,
	0, 321, 1125, 193, 0, 0, 0, 0, 0, 0,
	193, 588, 193, 0, 501, 500, 510, 511, 503, 504,
	505, 506, 507, 508, 509, 502, 0, 1287, 512, 0,
	0, 0, 1292, 0, 1151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1296, 0, 0, 1153, 0, 0,
	0, 0, 0, 0, 1156, 0, 0, 0, 0, 0,
	928, 1159, 0, 321, 0, 0, 0, 24, 25, 49,
	27, 28, 0, 0, 1314, 1315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 43, 0, 0, 0,
	0, 29, 0, 0, 0, 666, 667, 0, 0, 670,
	0, 0, 673, 0, 0, 0, 0, 0, 0, 0,
	38, 0, 0, 0, 51, 0, 0, 1196, 0, 1196,
	1196, 1196, 0, 1201, 0, 0, 0, 692, 0, 321,
	193, 193, 0, 0, 193, 0, 0, 193, 0, 0,
	0, 677, 0, 0, 0, 0, 0, 0, 0, 0,
	715, 0, 0, 0, 0, 321, 321, 321, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 31, 32, 34, 33, 36, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 0,
	0, 0, 0, 0, 677, 37, 44, 45, 0, 0,
	46, 47, 35, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1125, 0, 39, 40, 0, 41, 42, 0,
	0, 0, 0, 0, 0, 1196, 0, 0, 0, 0,
	0, 788, 0, 0, 0, 242, 0, 0, 56, 0,
	0, 242, 242, 1271, 0, 773, 773, 242, 0, 0,
	0, 773, 0, 0, 0, 0, 0, 0, 0, 0,
	818, 242, 242, 242, 242, 0, 193, 0, 773, 193,
	193, 193, 193, 193, 1181, 463, 772, 0, 0, 0,
	632, 0, 807, 0, 0, 193, 0, 0, 0, 588,
	0, 0, 1298, 0, 193, 193, 0, 50, 0, 0,
	0, 0, 1178, 463, 0, 0, 0, 0, 21, 0,
	0, 0, 501, 500, 510, 511, 503, 504, 505, 506,
	507, 508, 509, 502, 0, 0, 512, 874, 0, 0,
	0, 0, 0, 0, 0, 0, 898, 0, 463, 899,
	501, 500, 510, 511, 503, 504, 505, 506, 507, 508,
	509, 502, 0, 0, 512, 0, 0, 620, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 0, 0, 0,
	1063, 193, 0, 0, 193, 501, 500, 510, 511, 503,
	504, 505, 506, 507, 508, 509, 502, 633, 0, 512,
	501, 500, 510, 511, 503, 504, 505, 506, 507, 508,
	509, 502, 0, 677, 512, 0, 0, 0, 646, 647,
	648, 649, 650, 651, 652, 242, 653, 654, 655, 656,
	657, 634, 635, 636, 637, 618, 619, 1182, 0, 621,
	929, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 638, 639, 640, 641, 642, 643, 644, 645, 1179,
	501, 500, 510, 511, 503, 504, 505, 506, 507, 508,
	509, 502, 242, 496, 512, 499, 0, 0, 0, 0,
	0, 513, 514, 515, 516, 517, 518, 519, 242, 497,
	498, 495, 501, 500, 510, 511, 503, 504, 505, 506,
	507, 508, 509, 502, 0, 0, 512, 0, 0, 0,
	501, 500, 510, 511, 503, 504, 505, 506, 507, 508,
	509, 502, 0, 0, 512, 0, 0, 0, 193, 0,
	0, 0, 501, 500, 510, 511, 503, 504, 505, 506,
	507, 508, 509, 502, 0, 0, 512, 501, 500, 510,
	511, 503, 504, 505, 506, 507, 508, 509, 502, 0,
	0, 512, 500, 510, 511, 503, 504, 505, 506, 507,
	508, 509, 502, 0, 0, 512, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1056,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1051, 1052, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 242, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 677, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	773, 0, 0, 0, 0, 0, 773, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 407, 397, 0, 369, 409, 347,
	361, 417, 362, 363, 390, 333, 377, 107, 359, 0,
	350, 328, 356, 329, 348, 371, 75, 374, 346, 399,
	380, 89, 415, 91, 385, 0, 124, 100, 0, 0,
	373, 401, 375, 395, 368, 391, 338, 384, 410, 360,
	388, 411, 0, 0, 0, 180, 588, 833, 127, 834,
	0, 0, 0, 0, 0, 68, 0, 387, 406, 358,
	389, 327, 386, 0, 331, 334, 416, 404, 353, 354,
	993, 0, 0, 0, 0, 0, 0, 372, 376, 392,
	366, 0, 0, 0, 0, 0, 0, 0, 0, 351,
	0, 383, 0, 0, 0, 335, 332, 0, 370, 0,
	0, 0, 337, 0, 352, 393, 0, 326, 396, 402,
	367, 147, 405, 365, 364, 408, 113, 0, 0, 128,
	80, 79, 88, 400, 349, 357, 71, 355, 119, 109,
	140, 382, 110, 118, 92, 132, 114, 139, 148, 149,
	130, 146, 60, 129, 138, 69, 121, 62, 136, 126,
	98, 84, 85, 61, 0, 117, 74, 78, 73, 106,
	133, 134, 72, 156, 65, 145, 64, 66, 144, 105,
	131, 137, 99, 96, 63, 135, 97, 95, 87, 76,
	81, 111, 94, 112, 82, 102, 101, 103, 0, 330,
	0, 125, 142, 157, 345, 403, 150, 151, 152, 153,
	773, 0, 0, 104, 67, 83, 122, 86, 93, 116,
	155, 108, 120, 70, 141, 123, 341, 344, 339, 340,
	378, 379, 412, 413, 414, 394, 336, 0, 342, 343,
	0, 398, 381, 59, 0, 90, 154, 115, 77, 143,
	407, 397, 0, 369, 409, 347, 361, 417, 362, 363,
	390, 333, 377, 107, 359, 0, 350, 328, 356, 329,
	348, 371, 75, 374, 346, 399, 380, 89, 415, 91,
	385, 0, 124, 100, 0, 0, 373, 401, 375, 395,
	368, 391, 338, 384, 410, 360, 388, 411, 0, 0,
	0, 180, 0, 833, 127, 834, 0, 0, 0, 0,
	0, 68, 0, 387, 406, 358, 389, 327, 386, 0,
	331, 334, 416, 404, 353, 354, 0, 0, 0, 0,
	0, 0, 0, 372, 376, 392, 366, 0, 0, 0,
	0, 0, 0, 0, 0, 351, 0, 383, 0, 0,
	0, 335, 332, 0, 370, 0, 0, 0, 337, 0,
	352, 393, 0, 326, 396, 402, 367, 147, 405, 365,
	364, 408, 113, 0, 0, 128, 80, 79, 88, 400,
	349, 357, 71, 355, 119, 109, 140, 382, 110, 118,
	92, 132, 114, 139, 148, 149, 130, 146, 60, 129,
	138, 69, 121, 62, 136, 126, 98, 84, 85, 61,
	0, 117, 74, 78, 73, 106, 133, 134, 72, 156,
	65, 145, 64, 66, 144, 105, 131, 137, 99, 96,
	63, 135, 97, 95, 87, 76, 81, 111, 94, 112,
	82, 102, 101, 103, 0, 330, 0, 125, 142, 157,
	345, 403, 150, 151, 152, 153, 0, 0, 0, 104,
	67, 83, 122, 86, 93, 116, 155, 108, 120, 70,
	141, 123, 341, 344, 339, 340, 378, 379, 412, 413,
	414, 394, 336, 0, 342, 343, 0, 398, 381, 59,
	0, 90, 154, 115, 77, 143, 407, 397, 0, 369,
	409, 347, 361, 417, 362, 363, 390, 333, 377, 107,
	359, 0, 350, 328, 356, 329, 348, 371, 75, 374,
	346, 399, 380, 89, 415, 91, 385, 0, 124, 100,
	0, 0, 373, 401, 375, 395, 368, 391, 338, 384,
	410, 360, 388, 411, 51, 0, 0, 180, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 68, 0, 387,
	406, 358, 389, 327, 386, 0, 331, 334, 416, 404,
	353, 354, 0, 0, 0, 0, 0, 0, 0, 372,
	376, 392, 366, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 383, 0, 0, 0, 335, 332, 0,
	370, 0, 0, 0, 337, 0, 352, 393, 0, 326,
	396, 402, 367, 147, 405, 365, 364, 408, 113, 0,
	0, 128, 80, 79, 88, 400, 349, 357, 71, 355,
	119, 109, 140, 382, 110, 118, 92, 132, 114, 139,
	148, 149, 130, 146, 60, 129, 138, 69, 121, 62,
	136, 126, 98, 84, 85, 61, 0, 117, 74, 78,
	73, 106, 133, 134, 72, 156, 65, 145, 64, 66,
	144, 105, 131, 137, 99, 96, 63, 135, 97, 95,
	87, 76, 81, 111, 94, 112, 82, 102, 101, 103,
	0, 330, 0, 125, 142, 157, 345, 403, 150, 151,
	152, 153, 0, 0, 0, 104, 67, 83, 122, 86,
	93, 116, 155, 108, 120, 70, 141, 123, 341, 344,
	339, 340, 378, 379, 412, 413, 414, 394, 336, 0,
	342, 343, 0, 398, 381, 59, 0, 90, 154, 115,
	77, 143, 407, 397, 0, 369, 409, 347, 361, 417,
	362, 363, 390, 333, 377, 107, 359, 0, 350, 328,
	356, 329, 348, 371, 75, 374, 346, 399, 380, 89,
	415, 91, 385, 0, 124, 100, 0, 0, 373, 401,
	375, 395, 368, 391, 338, 384, 410, 360, 388, 411,
	0, 0, 0, 180, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 68, 0, 387, 406, 358, 389, 327,
	386, 0, 331, 334, 416, 404, 353, 354, 0, 0,
	0, 0, 0, 0, 0, 372, 376, 392, 366, 0,
	0, 0, 0, 0, 0, 1059, 0, 351, 0, 383,
	0, 0, 0, 335, 332, 0, 370, 0, 0, 0,
	337, 0, 352, 393, 0, 326, 396, 402, 367, 147,
	405, 365, 364, 408, 113, 0, 0, 128, 80, 79,
	88, 400, 349, 357, 71, 355, 119, 109, 140, 382,
	110, 118, 92, 132, 114, 139, 148, 149, 130, 146,
	60, 129, 138, 69, 121, 62, 136, 126, 98, 84,
	85, 61, 0, 117, 74, 78, 73, 106, 133, 134,
	72, 156, 65, 145, 64, 66, 144, 105, 131, 137,
	99, 96, 63, 135, 97, 95, 87, 76, 81, 111,
	94, 112, 82, 102, 101, 103, 0, 330, 0, 125,
	142, 157, 345, 403, 150, 151, 152, 153, 0, 0,
	0, 104, 67, 83, 122, 86, 93, 116, 155, 108,
	120, 70, 141, 123, 341, 344, 339, 340, 378, 379,
	412, 413, 414, 394, 336, 0, 342, 343, 0, 398,
	381, 59, 0, 90, 154, 115, 77, 143, 407, 397,
	0, 369, 409, 347, 361, 417, 362, 363, 390, 333,
	377, 107, 359, 0, 350, 328, 356, 329, 348, 371,
	75, 374, 346, 399, 380, 89, 415, 91, 385, 0,
	124, 100, 0, 0, 373, 401, 375, 395, 368, 391,
	338, 384, 410, 360, 388, 411, 0, 0, 0, 247,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 68,
	0, 387, 406, 358, 389, 327, 386, 0, 331, 334,
	416, 404, 353, 354, 0, 0, 0, 0, 0, 0,
	0, 372, 376, 392, 366, 0, 0, 0, 0, 0,
	0, 724, 0, 351, 0, 383, 0, 0, 0, 335,
	332, 0, 370, 0, 0, 0, 337, 0, 352, 393,
	0, 326, 396, 402, 367, 147, 405, 365, 364, 408,
	113, 0, 0, 128, 80, 79, 88, 400, 349, 357,
	71, 355, 119, 109, 140, 382, 110, 118, 92, 132,
	114, 139, 148, 149, 130, 146, 60, 129, 138, 69,
	121, 62, 136, 126, 98, 84, 85, 61, 0, 117,
	74, 78, 73, 106, 133, 134, 72, 156, 65, 145,
	64, 66, 144, 105, 131, 137, 99, 96, 63, 135,
	97, 95, 87, 76, 81, 111, 94, 112, 82, 102,
	101, 103, 0, 330, 0, 125, 142, 157, 345, 403,
	150, 151, 152, 153, 0, 0, 0, 104, 67, 83,
	122, 86, 93, 116, 155, 108, 120, 70, 141, 123,
	341, 344, 339, 340, 378, 379, 412, 413, 414, 394,
	336, 0, 342, 343, 0, 398, 381, 59, 0, 90,
	154, 115, 77, 143, 407, 397, 0, 369, 409, 347,
	361, 417, 362, 363, 390, 333, 377, 107, 359, 0,
	350, 328, 356, 329, 348, 371, 75, 374, 346, 399,
	380, 89, 415, 91, 385, 0, 124, 100, 0, 0,
	373, 401, 375, 395, 368, 391, 338, 384, 410, 360,
	388, 411, 0, 0, 0, 180, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 68, 0, 387, 406, 358,
	389, 327, 386, 0, 331, 334, 416, 404, 353, 354,
	0, 0, 0, 0, 0, 0, 0, 372, 376, 392,
	366, 0, 0, 0, 0, 0, 0, 0, 0, 351,
	0, 383, 0, 0, 0, 335, 332, 0, 370, 0,
	0, 0, 337, 0, 352, 393, 0, 326, 396, 402,
	367, 147, 405, 365, 364, 408, 113, 0, 0, 128,
	80, 79, 88, 400, 349, 357, 71, 355, 119, 109,
	140, 382, 110, 118, 92, 132, 114, 139, 148, 149,
	130, 146, 60, 129, 138, 69, 121, 62, 136, 126,
	98, 84, 85, 61, 0, 117, 74, 78, 73, 106,
	133, 134, 72, 156, 65, 145, 64, 66, 144, 105,
	131, 137, 99, 96, 63, 135, 97, 95, 87, 76,
	81, 111, 94, 112, 82, 102, 101, 103, 0, 330,
	0, 125, 142, 157, 345, 403, 150, 151, 152, 153,
	0, 0, 0, 104, 67, 83, 122, 86, 93, 116,
	155, 108, 120, 70, 141, 123, 341, 344, 339, 340,
	378, 379, 412, 413, 414, 394, 336, 0, 342, 343,
	0, 398, 381, 59, 0, 90, 154, 115, 77, 143,
	407, 397, 0, 369, 409, 347, 361, 417, 362, 363,
	390, 333, 377, 107, 359, 0, 350, 328, 356, 329,
	348, 371, 75, 374, 346, 399, 380, 89, 415, 91,
	385, 0, 124, 100, 0, 0, 373, 401, 375, 395,
	368, 391, 338, 384, 410, 360, 388, 411, 0, 0,
	0, 247, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 68, 0, 387, 406, 358, 389, 327, 386, 0,
	331, 334, 416, 404, 353, 354, 0, 0, 0, 0,
	0, 0, 0, 372, 376, 392, 366, 0, 0, 0,
	0, 0, 0, 0, 0, 351, 0, 383, 0, 0,
	0, 335, 332, 0, 370, 0, 0, 0, 337, 0,
	352, 393, 0, 326, 396, 402, 367, 147, 405, 365,
	364, 408, 113, 0, 0, 128, 80, 79, 88, 400,
	349, 357, 71, 355, 119, 109, 140, 382, 110, 118,
	92, 132, 114, 139, 148, 149, 130, 146, 60, 129,
	138, 69, 121, 62, 136, 126, 98, 84, 85, 61,
	0, 117, 74, 78, 73, 106, 133, 134, 72, 156,
	65, 145, 64, 66, 144, 105, 131, 137, 99, 96,
	63, 135, 97, 95, 87, 76, 81, 111, 94, 112,
	82, 102, 101, 103, 0, 330, 0, 125, 142, 157,
	345, 403, 150, 151, 152, 153, 0, 0, 0, 104,
	67, 83, 122, 86, 93, 116, 155, 108, 120, 70,
	141, 123, 341, 344, 339, 340, 378, 379, 412, 413,
	414, 394, 336, 0, 342, 343, 0, 398, 381, 59,
	0, 90, 154, 115, 77, 143, 407, 397, 0, 369,
	409, 347, 361, 417, 362, 363, 390, 333, 377, 107,
	359, 0, 350, 328, 356, 329, 348, 371, 75, 374,
	346, 399, 380, 89, 415, 91, 385, 0, 124, 100,
	0, 0, 373, 401, 375, 395, 368, 391, 338, 384,
	410, 360, 388, 411, 0, 0, 0, 180, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 68, 0, 387,
	406, 358, 389, 327, 386, 0, 331, 334, 416, 404,
	353, 354, 0, 0, 0, 0, 0, 0, 0, 372,
	376, 392, 366, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 383, 0, 0, 0, 335, 332, 0,
	370, 0, 0, 0, 337, 0, 352, 393, 0, 326,
	396, 402, 367, 147, 405, 365, 364, 408, 113, 0,
	0, 128, 80, 79, 88, 400, 349, 357, 71, 355,
	119, 109, 140, 382, 110, 118, 92, 132, 114, 139,
	148, 149, 130, 146, 60, 129, 138, 69, 121, 62,
	136, 126, 98, 84, 85, 61, 0, 117, 74, 78,
	73, 106, 133, 134, 72, 156, 65, 145, 64, 324,
	144, 105, 131, 137, 99, 96, 63, 135, 97, 95,
	87, 76, 81, 111, 94, 112, 82, 102, 101, 103,
	0, 330, 0, 125, 142, 157, 345, 403, 150, 151,
	152, 153, 0, 0, 0, 325, 323, 83, 122, 86,
	93, 116, 155, 108, 120, 70, 141, 123, 341, 344,
	339, 340, 378, 379, 412, 413, 414, 394, 336, 0,
	342, 343, 0, 398, 381, 59, 0, 90, 154, 115,
	77, 143, 407, 397, 0, 369, 409, 347, 361, 417,
	362, 363, 390, 333, 377, 107, 359, 0, 350, 328,
	356, 329, 348, 371, 75, 374, 346, 399, 380, 89,
	415, 91, 385, 0, 124, 100, 0, 0, 373, 401,
	375, 395, 368, 391, 338, 384, 410, 360, 388, 411,
	0, 0, 0, 57, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 68, 0, 387, 406, 358, 389, 327,
	386, 0, 331, 334, 416, 404, 353, 354, 0, 0,
	0, 0, 0, 0, 0, 372, 376, 392, 366, 0,
	0, 0, 0, 0, 0, 0, 0, 351, 0, 383,
	0, 0, 0, 335, 332, 0, 370, 0, 0, 0,
	337, 0, 352, 393, 0, 326, 396, 402, 367, 147,
	405, 365, 364, 408, 113, 0, 0, 128, 80, 79,
	88, 400, 349, 357, 71, 355, 119, 109, 140, 382,
	110, 118, 92, 132, 114, 139, 148, 149, 130, 146,
	60, 129, 138, 69, 121, 62, 136, 126, 98, 84,
	85, 61, 0, 117, 74, 78, 73, 106, 133, 134,
	72, 156, 65, 145, 64, 66, 144, 105, 131, 137,
	99, 96, 63, 135, 97, 95, 87, 76, 81, 111,
	94, 112, 82, 102, 101, 103, 0, 330, 0, 125,
	142, 157, 345, 403, 150, 151, 152, 153, 0, 0,
	0, 104, 67, 83, 122, 86, 93, 116, 155, 108,
	120, 70, 141, 123, 341, 344, 339, 340, 378, 379,
	412, 413, 414, 394, 336, 0, 342, 343, 0, 398,
	381, 59, 0, 90, 154, 115, 77, 143, 407, 397,
	0, 369, 409, 347, 361, 417, 362, 363, 390, 333,
	377, 107, 359, 0, 350, 328, 356, 329, 348, 371,
	75, 374, 346, 399, 380, 89, 415, 91, 385, 0,
	124, 100, 0, 0, 373, 401, 375, 395, 368, 391,
	338, 384, 410, 360, 388, 411, 0, 0, 0, 180,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 68,
	0, 387, 406, 358, 389, 327, 386, 0, 331, 334,
	416, 404, 353, 354, 0, 0, 0, 0, 0, 0,
	0, 372, 376, 392, 366, 0, 0, 0, 0, 0,
	0, 0, 0, 351, 0, 383, 0, 0, 0, 335,
	332, 0, 370, 0, 0, 0, 337, 0, 352, 393,
	0, 326, 396, 402, 367, 147, 405, 365, 364, 408,
	113, 0, 0, 128, 80, 79, 88, 400, 349, 357,
	71, 355, 119, 109, 140, 382, 110, 118, 92, 132,
	114, 139, 148, 149, 130, 146, 60, 129, 598, 69,
	121, 62, 136, 126, 98, 84, 85, 61, 0, 117,
	74, 78, 73, 106, 133, 134, 72, 156, 65, 145,
	64, 324, 144, 105, 131, 137, 99, 96, 63, 135,
	97, 95, 87, 76, 81, 111, 94, 112, 82, 102,
	101, 103, 0, 330, 0, 125, 142, 157, 345, 403,
	150, 151, 152, 153, 0, 0, 0, 325, 323, 83,
	122, 86, 93, 116, 155, 108, 120, 70, 141, 123,
	341, 344, 339, 340, 378, 379, 412, 413, 414, 394,
	336, 0, 342, 343, 0, 398, 381, 59, 0, 90,
	154, 115, 77, 143, 407, 397, 0, 369, 409, 347,
	361, 417, 362, 363, 390, 333, 377, 107, 359, 0,
	350, 328, 356, 329, 348, 371, 75, 374, 346, 399,
	380, 89, 415, 91, 385, 0, 124, 100, 0, 0,
	373, 401, 375, 395, 368, 391, 338, 384, 410, 360,
	388, 411, 0, 0, 0, 180, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 68, 0, 387, 406, 358,
	389, 327, 386, 0, 331, 334, 416, 404, 353, 354,
	0, 0, 0, 0, 0, 0, 0, 372, 376, 392,
	366, 0, 0, 0, 0, 0, 0, 0, 0, 351,
	0, 383, 0, 0, 0, 335, 332, 0, 370, 0,
	0, 0, 337, 0, 352, 393, 0, 326, 396, 402,
	367, 147, 405, 365, 364, 408, 113, 0, 0, 128,
	80, 79, 88, 400, 349, 357, 71, 355, 119, 109,
	140, 382, 110, 118, 92, 132, 114, 139, 148, 149,
	130, 146, 60, 129, 315, 69, 121, 62, 136, 126,
	98, 84, 85, 61, 0, 117, 74, 78, 73, 106,
	133, 134, 72, 156, 65, 145, 64, 324, 144, 105,
	131, 137, 99, 96, 63, 135, 97, 95, 87, 76,
	81, 111, 94, 112, 82, 102, 101, 103, 0, 330,
	0, 125, 142, 157, 345, 403, 150, 151, 152, 153,
	0, 0, 0, 325, 323, 318, 317, 86, 93, 116,
	155, 108, 120, 70, 141, 123, 341, 344, 339, 340,
	378, 379, 412, 413, 414, 394, 336, 0, 342, 343,
	0, 398, 381, 59, 0, 90, 154, 115, 77, 143,
	107, 0, 0, 760, 0, 249, 0, 0, 0, 75,
	0, 246, 0, 0, 89, 288, 91, 0, 0, 124,
	100, 0, 0, 0, 0, 279, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 0, 247, 267,
	266, 127, 269, 270, 271, 272, 0, 0, 68, 268,
	273, 274, 275, 0, 0, 244, 260, 0, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	240, 0, 0, 0, 299, 0, 259, 0, 0, 255,
	256, 261, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 0, 0, 297, 0, 113,
	0, 0, 128, 80, 79, 88, 0, 0, 0, 71,
	0, 119, 109, 140, 0, 110, 118, 92, 132, 114,
	139, 148, 149, 130, 146, 60, 129, 138, 69, 121,
	62, 136, 126, 98, 84, 85, 61, 0, 117, 74,
	78, 73, 106, 133, 134, 72, 156, 65, 145, 64,
	66, 144, 105, 131, 137, 99, 96, 63, 135, 97,
	95, 87, 76, 81, 111, 94, 112, 82, 102, 101,
	103, 0, 0, 0, 125, 142, 157, 0, 0, 150,
	151, 152, 153, 0, 0, 0, 104, 67, 83, 122,
	86, 93, 116, 155, 108, 120, 70, 141, 123, 289,
	298, 295, 296, 293, 294, 292, 291, 290, 300, 281,
	282, 283, 284, 286, 0, 285, 59, 0, 90, 154,
	115, 77, 143, 107, 0, 0, 0, 0, 249, 0,
	0, 0, 75, 0, 246, 0, 0, 89, 288, 91,
	0, 0, 124, 100, 0, 0, 0, 0, 279, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	463, 247, 267, 266, 127, 269, 270, 271, 272, 0,
	0, 68, 268, 273, 274, 275, 0, 0, 244, 260,
	0, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 0, 0, 0, 0, 299, 0, 259,
	0, 0, 255, 256, 261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 0, 0,
	297, 0, 113, 0, 0, 128, 80, 79, 88, 0,
	0, 0, 71, 0, 119, 109, 140, 0, 110, 118,
	92, 132, 114, 139, 148, 149, 130, 146, 60, 129,
	138, 69, 121, 62, 136, 126, 98, 84, 85, 61,
	0, 117, 74, 78, 73, 106, 133, 134, 72, 156,
	65, 145, 64, 66, 144, 105, 131, 137, 99, 96,
	63, 135, 97, 95, 87, 76, 81, 111, 94, 112,
	82, 102, 101, 103, 0, 0, 0, 125, 142, 157,
	0, 0, 150, 151, 152, 153, 0, 0, 0, 104,
	67, 83, 122, 86, 93, 116, 155, 108, 120, 70,
	141, 123, 289, 298, 295, 296, 293, 294, 292, 291,
	290, 300, 281, 282, 283, 284, 286, 0, 285, 59,
	0, 90, 154, 115, 77, 143, 107, 0, 0, 0,
	0, 249, 0, 0, 0, 75, 0, 246, 0, 0,
	89, 288, 91, 0, 0, 124, 100, 0, 0, 0,
	0, 279, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 247, 267, 266, 127, 269, 270,
	271, 272, 0, 0, 68, 268, 273, 274, 275, 0,
	0, 244, 260, 0, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 240, 0, 0, 0,
	299, 0, 259, 0, 0, 255, 256, 261, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 0, 0, 297, 0, 113, 0, 0, 128, 80,
	79, 88, 0, 0, 0, 71, 0, 119, 109, 140,
	0, 110, 118, 92, 132, 114, 139, 148, 149, 130,
	146, 60, 129, 138, 69, 121, 62, 136, 126, 98,
	84, 85, 61, 0, 117, 74, 78, 73, 106, 133,
	134, 72, 156, 65, 145, 64, 66, 144, 105, 131,
	137, 99, 96, 63, 135, 97, 95, 87, 76, 81,
	111, 94, 112, 82, 102, 101, 103, 0, 0, 0,
	125, 142, 157, 0, 0, 150, 151, 152, 153, 0,
	0, 0, 104, 67, 83, 122, 86, 93, 116, 155,
	108, 120, 70, 141, 123, 289, 298, 295, 296, 293,
	294, 292, 291, 290, 300, 281, 282, 283, 284, 286,
	0, 285, 59, 0, 90, 154, 115, 77, 143, 107,
	0, 0, 0, 0, 249, 0, 0, 0, 75, 0,
	246, 0, 0, 89, 288, 91, 0, 0, 124, 100,
	0, 0, 0, 0, 279, 280, 0, 0, 0, 0,
	0, 0, 825, 0, 51, 0, 0, 247, 267, 266,
	127, 269, 270, 271, 272, 0, 0, 68, 268, 273,
	274, 275, 0, 0, 244, 260, 0, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 0,
	0, 0, 0, 299, 0, 259, 0, 0, 255, 256,
	261, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 297, 0, 113, 0,
	0, 128, 80, 79, 88, 0, 0, 0, 71, 0,
	119, 109, 140, 0, 110, 118, 92, 132, 114, 139,
	148, 149, 130, 146, 60, 129, 138, 69, 121, 62,
	136, 126, 98, 84, 85, 61, 0, 117, 74, 78,
	73, 106, 133, 134, 72, 156, 65, 145, 64, 66,
	144, 105, 131, 137, 99, 96, 63, 135, 97, 95,
	87, 76, 81, 111, 94, 112, 82, 102, 101, 103,
	0, 0, 0, 125, 142, 157, 0, 0, 150, 151,
	152, 153, 0, 0, 0, 104, 67, 83, 122, 86,
	93, 116, 155, 108, 120, 70, 141, 123, 289, 298,
	295, 296, 293, 294, 292, 291, 290, 300, 281, 282,
	283, 284, 286, 24, 285, 59, 0, 90, 154, 115,
	77, 143, 0, 0, 0, 107, 0, 0, 0, 0,
	249, 0, 0, 0, 75, 0, 246, 0, 0, 89,
	288, 91, 0, 0, 124, 100, 0, 0, 0, 0,
	279, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 0, 0, 247, 267, 266, 127, 269, 270, 271,
	272, 0, 0, 68, 268, 273, 274, 275, 0, 0,
	244, 260, 0, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 0, 0, 0, 0, 299,
	0, 259, 0, 0, 255, 256, 261, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	0, 0, 297, 0, 113, 0, 0, 128, 80, 79,
	88, 0, 0, 0, 71, 0, 119, 109, 140, 0,
	110, 118, 92, 132, 114, 139, 148, 149, 130, 146,
	60, 129, 138, 69, 121, 62, 136, 126, 98, 84,
	85, 61, 0, 117, 74, 78, 73, 106, 133, 134,
	72, 156, 65, 145, 64, 66, 144, 105, 131, 137,
	99, 96, 63, 135, 97, 95, 87, 76, 81, 111,
	94, 112, 82, 102, 101, 103, 0, 0, 0, 125,
	142, 157, 0, 0, 150, 151, 152, 153, 0, 0,
	0, 104, 67, 83, 122, 86, 93, 116, 155, 108,
	120, 70, 141, 123, 289, 298, 295, 296, 293, 294,
	292, 291, 290, 300, 281, 282, 283, 284, 286, 0,
	285, 59, 0, 90, 536, 115, 77, 143, 107, 0,
	0, 0, 0, 249, 0, 0, 0, 75, 0, 246,
	0, 0, 89, 288, 91, 0, 0, 124, 100, 0,
	0, 0, 0, 279, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 247, 267, 266, 127,
	269, 270, 271, 272, 0, 0, 68, 268, 273, 274,
	275, 0, 0, 244, 260, 0, 287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 0, 0,
	0, 0, 299, 0, 259, 0, 0, 255, 256, 261,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 0, 0, 297, 0, 113, 0, 0,
	128, 80, 79, 88, 0, 0, 0, 71, 0, 119,
	109, 140, 0, 110, 118, 92, 132, 114, 139, 148,
	149, 130, 146, 60, 129, 138, 69, 121, 62, 136,
	126, 98, 84, 85, 61, 0, 117, 74, 78, 73,
	106, 133, 134, 72, 156, 65, 145, 64, 66, 144,
	105, 131, 137, 99, 96, 63, 135, 97, 95, 87,
	76, 81, 111, 94, 112, 82, 102, 101, 103, 0,
	0, 0, 125, 142, 157, 0, 0, 150, 151, 152,
	153, 0, 0, 0, 104, 67, 83, 122, 86, 93,
	116, 155, 108, 120, 70, 141, 123, 289, 298, 295,
	296, 293, 294, 292, 291, 290, 300, 281, 282, 283,
	284, 286, 107, 285, 59, 0, 90, 154, 115, 77,
	143, 75, 0, 0, 0, 0, 89, 288, 91, 0,
	0, 124, 100, 0, 0, 0, 0, 279, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	247, 267, 266, 127, 269, 270, 271, 272, 0, 0,
	68, 268, 273, 274, 275, 0, 0, 0, 260, 0,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 0, 0, 0, 0, 299, 0, 259, 0,
	0, 255, 256, 261, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 297,
	0, 113, 0, 0, 128, 80, 79, 88, 0, 0,
	0, 71, 0, 119, 109, 140, 1313, 110, 118, 92,
	132, 114, 139, 148, 149, 130, 146, 60, 129, 138,
	69, 121, 62, 136, 126, 98, 84, 85, 61, 0,
	117, 74, 78, 73, 106, 133, 134, 72, 156, 65,
	145, 64, 66, 144, 105, 131, 137, 99, 96, 63,
	135, 97, 95, 87, 76, 81, 111, 94, 112, 82,
	102, 101, 103, 0, 0, 0, 125, 142, 157, 0,
	0, 150, 151, 152, 153, 0, 0, 0, 104, 67,
	83, 122, 86, 93, 116, 155, 108, 120, 70, 141,
	123, 289, 298, 295, 296, 293, 294, 292, 291, 290,
	300, 281, 282, 283, 284, 286, 107, 285, 59, 0,
	90, 154, 115, 77, 143, 75, 0, 0, 0, 0,
	89, 288, 91, 0, 0, 124, 100, 0, 0, 0,
	0, 279, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 247, 267, 266, 127, 269, 270,
	271, 272, 0, 0, 68, 268, 273, 274, 275, 0,
	0, 0, 260, 0, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 0, 0, 0, 0,
	299, 0, 259, 0, 0, 255, 256, 261, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 0, 0, 297, 0, 113, 0, 0, 128, 80,
	79, 88, 0, 0, 0, 71, 0, 119, 109, 140,
	0, 110, 118, 92, 132, 114, 139, 148, 149, 130,
	146, 60, 129, 138, 69, 121, 62, 136, 126, 98,
	84, 85, 61, 0, 117, 74, 78, 73, 106, 133,
	134, 72, 156, 65, 145, 64, 66, 144, 105, 131,
	137, 99, 96, 63, 135, 97, 95, 87, 76, 81,
	111, 94, 112, 82, 102, 101, 103, 0, 0, 0,
	125, 142, 157, 0, 0, 150, 151, 152, 153, 0,
	0, 0, 104, 67, 83, 122, 86, 93, 116, 155,
	108, 120, 70, 141, 123, 289, 298, 295, 296, 293,
	294, 292, 291, 290, 300, 281, 282, 283, 284, 286,
	107, 285, 59, 0, 90, 154, 115, 77, 143, 75,
	0, 0, 0, 0, 89, 0, 91, 0, 0, 124,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 180, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 501, 500, 510, 511, 503, 504,
	505, 506, 507, 508, 509, 502, 0, 0, 512, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 0, 0, 0, 0, 113,
	0, 0, 128, 80, 79, 88, 0, 0, 0, 71,
	0, 119, 109, 140, 0, 110, 118, 92, 132, 114,
	139, 148, 149, 130, 146, 60, 129, 138, 69, 121,
	62, 136, 126, 98, 84, 85, 61, 0, 117, 74,
	78, 73, 106, 133, 134, 72, 156, 65, 145, 64,
	66, 144, 105, 131, 137, 99, 96, 63, 135, 97,
	95, 87, 76, 81, 111, 94, 112, 82, 102, 101,
	103, 0, 0, 0, 125, 142, 157, 0, 0, 150,
	151, 152, 153, 0, 0, 0, 104, 67, 83, 122,
	86, 93, 116, 155, 108, 120, 70, 141, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 90, 154,
	115, 77, 143, 107, 0, 0, 0, 489, 0, 0,
	0, 0, 75, 0, 0, 0, 0, 89, 0, 91,
	0, 0, 124, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 180, 0, 491, 127, 0, 0, 0, 0, 0,
	0, 68, 0, 0, 0, 0, 486, 485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 0, 0,
	0, 0, 113, 0, 0, 128, 80, 79, 88, 0,
	0, 0, 71, 0, 119, 109, 140, 0, 110, 118,
	92, 132, 114, 139, 148, 149, 130, 146, 60, 129,
	138, 69, 121, 62, 136, 126, 98, 84, 85, 61,
	0, 117, 74, 78, 73, 106, 133, 134, 72, 156,
	65, 145, 64, 66, 144, 105, 131, 137, 99, 96,
	63, 135, 97, 95, 87, 76, 81, 111, 94, 112,
	82, 102, 101, 103, 0, 0, 0, 125, 142, 157,
	0, 0, 150, 151, 152, 153, 0, 0, 0, 104,
	67, 83, 122, 86, 93, 116, 155, 108, 120, 70,
	141, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 59,
	0, 90, 154, 115, 77, 143, 75, 0, 0, 0,
	0, 89, 0, 91, 0, 0, 124, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 180, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 68, 0, 0, 0, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 172, 0, 0, 0, 178, 113, 0, 0, 128,
	80, 79, 88, 0, 0, 0, 71, 0, 119, 109,
	140, 0, 110, 118, 92, 132, 114, 139, 174, 149,
	130, 146, 60, 129, 138, 69, 121, 62, 136, 126,
	98, 84, 85, 61, 0, 117, 74, 78, 73, 106,
	133, 134, 72, 156, 65, 145, 64, 66, 144, 105,
	131, 137, 99, 96, 63, 135, 97, 95, 87, 76,
	81, 111, 94, 112, 82, 102, 101, 103, 0, 0,
	0, 125, 142, 157, 0, 0, 150, 151, 152, 153,
	0, 0, 0, 104, 67, 83, 122, 86, 93, 116,
	155, 108, 120, 70, 141, 123, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 90, 154, 115, 77, 143,
	107, 0, 0, 0, 587, 0, 0, 0, 0, 75,
	0, 0, 0, 0, 89, 0, 91, 0, 0, 124,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 57, 0,
	589, 127, 0, 0, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 0, 0, 0, 0, 113,
	0, 0, 128, 80, 79, 88, 0, 0, 0, 71,
	0, 119, 109, 140, 0, 110, 118, 92, 132, 114,
	139, 148, 149, 130, 146, 60, 129, 138, 69, 121,
	62, 136, 126, 98, 84, 85, 61, 0, 117, 74,
	78, 73, 106, 133, 134, 72, 156, 65, 145, 64,
	66, 144, 105, 131, 137, 99, 96, 63, 135, 97,
	95, 87, 76, 81, 111, 94, 112, 82, 102, 101,
	103, 0, 0, 0, 125, 142, 157, 0, 0, 150,
	151, 152, 153, 0, 0, 0, 104, 67, 83, 122,
	86, 93, 116, 155, 108, 120, 70, 141, 123, 0,
	0, 0, 24, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 59, 0, 90, 154,
	115, 77, 143, 75, 0, 0, 0, 0, 89, 0,
	91, 0, 0, 124, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 180, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 0,
	0, 0, 0, 113, 0, 0, 128, 80, 79, 88,
	0, 0, 0, 71, 0, 119, 109, 140, 0, 110,
	118, 92, 132, 114, 139, 148, 149, 130, 146, 60,
	129, 138, 69, 121, 62, 136, 126, 98, 84, 85,
	61, 0, 117, 74, 78, 73, 106, 133, 134, 72,
	156, 65, 145, 64, 66, 144, 105, 131, 137, 99,
	96, 63, 135, 97, 95, 87, 76, 81, 111, 94,
	112, 82, 102, 101, 103, 0, 0, 0, 125, 142,
	157, 0, 0, 150, 151, 152, 153, 0, 0, 0,
	104, 67, 83, 122, 86, 93, 116, 155, 108, 120,
	70, 141, 123, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	59, 0, 90, 536, 115, 77, 143, 75, 0, 0,
	0, 0, 89, 0, 91, 0, 0, 124, 100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 57, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 68, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 0, 0, 0, 0, 113, 0, 0,
	128, 80, 79, 88, 0, 0, 0, 71, 0, 119,
	109, 140, 0, 110, 118, 92, 132, 114, 139, 148,
	149, 130, 146, 60, 129, 138, 69, 121, 62, 136,
	126, 98, 84, 85, 61, 0, 117, 74, 78, 73,
	106, 133, 134, 72, 156, 65, 145, 64, 66, 144,
	105, 131, 137, 99, 96, 63, 135, 97, 95, 87,
	76, 81, 111, 94, 112, 82, 102, 101, 103, 0,
	0, 0, 125, 142, 157, 0, 0, 150, 151, 152,
	153, 0, 0, 0, 104, 67, 83, 122, 86, 93,
	116, 155, 108, 120, 70, 141, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 59, 0, 90, 536, 115, 77,
	143, 75, 0, 0, 0, 0, 89, 0, 91, 0,
	0, 124, 100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 127, 711, 0, 0, 712, 0, 0,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 0,
	0, 113, 0, 0, 128, 80, 79, 88, 0, 0,
	0, 71, 0, 119, 109, 140, 0, 110, 118, 92,
	132, 114, 139, 148, 149, 130, 146, 60, 129, 138,
	69, 121, 62, 136, 126, 98, 84, 85, 61, 0,
	117, 74, 78, 73, 106, 133, 134, 72, 156, 65,
	145, 64, 66, 144, 105, 131, 137, 99, 96, 63,
	135, 97, 95, 87, 76, 81, 111, 94, 112, 82,
	102, 101, 103, 0, 0, 0, 125, 142, 157, 0,
	0, 150, 151, 152, 153, 0, 0, 0, 104, 67,
	83, 122, 86, 93, 116, 155, 108, 120, 70, 141,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 59, 0,
	90, 154, 115, 77, 143, 75, 0, 607, 0, 0,
	89, 0, 91, 0, 0, 124, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 180, 0, 606, 127, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 0, 0, 0, 0, 113, 0, 0, 128, 80,
	79, 88, 0, 0, 0, 71, 0, 119, 109, 140,
	0, 110, 118, 92, 132, 114, 139, 148, 149, 130,
	146, 60, 129, 138, 69, 121, 62, 136, 126, 98,
	84, 85, 61, 0, 117, 74, 78, 73, 106, 133,
	134, 72, 156, 65, 145, 64, 66, 144, 105, 131,
	137, 99, 96, 63, 135, 97, 95, 87, 76, 81,
	111, 94, 112, 82, 102, 101, 103, 0, 0, 0,
	125, 142, 157, 0, 0, 150, 151, 152, 153, 0,
	0, 0, 104, 67, 83, 122, 86, 93, 116, 155,
	108, 120, 70, 141, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 90, 154, 115, 77, 143, 107,
	0, 0, 0, 587, 0, 0, 0, 0, 75, 0,
	0, 0, 0, 89, 0, 91, 0, 0, 124, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 0, 589,
	127, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 0, 113, 0,
	0, 128, 80, 79, 88, 0, 0, 0, 71, 0,
	119, 109, 140, 0, 585, 118, 92, 132, 114, 139,
	148, 149, 130, 146, 60, 129, 138, 69, 121, 62,
	136, 126, 98, 84, 85, 61, 0, 117, 74, 78,
	73, 106, 133, 134, 72, 156, 65, 145, 64, 66,
	144, 105, 131, 137, 99, 96, 63, 135, 97, 95,
	87, 76, 81, 111, 94, 112, 82, 102, 101, 103,
	0, 0, 0, 125, 142, 157, 0, 0, 150, 151,
	152, 153, 0, 0, 0, 104, 67, 83, 122, 86,
	93, 116, 155, 108, 120, 70, 141, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 59, 0, 90, 154, 115,
	77, 143, 75, 0, 0, 0, 0, 89, 0, 91,
	0, 0, 124, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 57, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 68, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 0, 0,
	0, 0, 113, 0, 0, 128, 80, 79, 88, 0,
	0, 0, 71, 0, 119, 109, 140, 0, 110, 118,
	92, 132, 114, 139, 148, 149, 130, 146, 60, 129,
	138, 69, 121, 62, 136, 126, 98, 84, 85, 61,
	0, 117, 74, 78, 73, 106, 133, 134, 72, 156,
	65, 145, 64, 66, 144, 105, 131, 137, 99, 96,
	63, 135, 97, 95, 87, 76, 81, 111, 94, 112,
	82, 102, 101, 103, 0, 0, 0, 125, 142, 157,
	0, 0, 150, 151, 152, 153, 0, 0, 0, 104,
	67, 83, 122, 86, 93, 116, 155, 108, 120, 70,
	141, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 59,
	0, 90, 154, 115, 77, 143, 75, 0, 0, 0,
	0, 89, 0, 91, 0, 0, 124, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 589, 127, 0,
	0, 0, 0, 0, 0, 68, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 0, 0, 0, 0, 113, 0, 0, 128,
	80, 79, 88, 0, 0, 0, 71, 0, 119, 109,
	140, 0, 110, 118, 92, 132, 114, 139, 148, 149,
	130, 146, 60, 129, 138, 69, 121, 62, 136, 126,
	98, 84, 85, 61, 0, 117, 74, 78, 73, 106,
	133, 134, 72, 156, 65, 145, 64, 66, 144, 105,
	131, 137, 99, 96, 63, 135, 97, 95, 87, 76,
	81, 111, 94, 112, 82, 102, 101, 103, 0, 0,
	0, 125, 142, 157, 0, 0, 150, 151, 152, 153,
	0, 0, 0, 104, 67, 83, 122, 86, 93, 116,
	155, 108, 120, 70, 141, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 59, 0, 90, 154, 115, 77, 143,
	75, 0, 0, 0, 0, 89, 0, 91, 0, 0,
	124, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 180,
	0, 491, 127, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 0, 0, 0, 0,
	113, 0, 0, 128, 80, 79, 88, 0, 0, 0,
	71, 0, 119, 109, 140, 0, 110, 118, 92, 132,
	114, 139, 148, 149, 130, 146, 60, 129, 138, 69,
	121, 62, 136, 126, 98, 84, 85, 61, 0, 117,
	74, 78, 73, 106, 133, 134, 72, 156, 65, 145,
	64, 66, 144, 105, 131, 137, 99, 96, 63, 135,
	97, 95, 87, 76, 81, 111, 94, 112, 82, 102,
	101, 103, 0, 0, 0, 125, 142, 157, 0, 0,
	150, 151, 152, 153, 0, 0, 0, 104, 67, 83,
	122, 86, 93, 116, 155, 108, 120, 70, 141, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 59, 0, 90,
	154, 115, 77, 143, 564, 75, 0, 0, 0, 0,
	89, 0, 91, 0, 0, 124, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 57, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 0, 0, 0, 0, 113, 0, 0, 128, 80,
	79, 88, 0, 0, 0, 71, 0, 119, 109, 140,
	0, 110, 118, 92, 132, 114, 139, 148, 149, 130,
	146, 60, 129, 138, 69, 121, 62, 136, 126, 98,
	84, 85, 61, 0, 117, 74, 78, 73, 106, 133,
	134, 72, 156, 65, 145, 64, 66, 144, 105, 131,
	137, 99, 96, 63, 135, 97, 95, 87, 76, 81,
	111, 94, 112, 82, 102, 101, 103, 0, 0, 0,
	125, 142, 157, 0, 0, 150, 151, 152, 153, 0,
	0, 0, 104, 67, 83, 122, 86, 93, 116, 155,
	108, 120, 70, 141, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 0, 0, 0, 0, 0,
	107, 0, 59, 0, 90, 154, 115, 77, 143, 75,
	0, 0, 0, 0, 89, 0, 91, 0, 0, 124,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 57, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 0, 0, 0, 0, 113,
	0, 0, 128, 80, 79, 88, 0, 0, 0, 71,
	0, 119, 109, 140, 0, 110, 118, 92, 132, 114,
	139, 148, 149, 130, 146, 60, 129, 138, 69, 121,
	62, 136, 126, 98, 84, 85, 61, 0, 117, 74,
	78, 73, 106, 133, 134, 72, 156, 65, 145, 64,
	66, 144, 105, 131, 137, 99, 96, 63, 135, 97,
	95, 87, 76, 81, 111, 94, 112, 82, 102, 101,
	103, 0, 0, 0, 125, 142, 157, 0, 0, 150,
	151, 152, 153, 0, 0, 0, 104, 67, 83, 122,
	86, 93, 116, 155, 108, 120, 70, 141, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 59, 0, 90, 154,
	115, 77, 143, 75, 0, 0, 0, 0, 89, 0,
	91, 0, 0, 124, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 57, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 0, 147, 0,
	0, 0, 0, 113, 0, 0, 128, 80, 79, 88,
	0, 0, 0, 71, 0, 119, 109, 140, 0, 110,
	118, 92, 132, 114, 139, 148, 149, 130, 146, 60,
	129, 138, 69, 121, 62, 136, 126, 98, 84, 85,
	61, 0, 117, 74, 78, 73, 106, 133, 134, 72,
	156, 65, 145, 64, 66, 144, 105, 131, 137, 99,
	96, 63, 135, 97, 95, 87, 76, 81, 111, 94,
	112, 82, 102, 101, 103, 0, 0, 0, 125, 142,
	157, 0, 0, 150, 151, 152, 153, 0, 0, 0,
	104, 67, 83, 122, 86, 93, 116, 155, 108, 120,
	70, 141, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	59, 0, 90, 154, 115, 77, 143, 75, 0, 0,
	0, 0, 89, 0, 91, 0, 0, 124, 100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 180, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 68, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 0, 0, 0, 0, 113, 0, 0,
	128, 80, 79, 88, 0, 0, 0, 71, 0, 119,
	109, 140, 0, 110, 118, 92, 132, 114, 139, 148,
	149, 130, 146, 60, 129, 138, 69, 121, 62, 136,
	126, 98, 84, 85, 61, 0, 117, 74, 78, 73,
	106, 133, 134, 72, 156, 65, 145, 64, 66, 144,
	105, 131, 137, 99, 96, 63, 135, 97, 95, 87,
	76, 81, 111, 94, 112, 82, 102, 101, 103, 0,
	0, 0, 125, 142, 157, 0, 0, 150, 151, 152,
	153, 0, 0, 0, 104, 67, 83, 122, 86, 93,
	116, 155, 108, 120, 70, 141, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 59, 0, 90, 154, 115, 77,
	143, 75, 0, 0, 0, 0, 89, 0, 91, 0,
	0, 124, 100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	247, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 0,
	0, 113, 0, 0, 128, 80, 79, 88, 0, 0,
	0, 71, 0, 119, 109, 140, 0, 110, 118, 92,
	132, 114, 139, 148, 149, 130, 146, 60, 129, 138,
	69, 121, 62, 136, 126, 98, 84, 85, 61, 0,
	117, 74, 78, 73, 106, 133, 134, 72, 156, 65,
	145, 64, 66, 144, 105, 131, 137, 99, 96, 63,
	135, 97, 95, 87, 76, 81, 111, 94, 112, 82,
	102, 101, 103, 0, 0, 0, 125, 142, 157, 0,
	0, 150, 151, 152, 153, 0, 0, 0, 104, 67,
	83, 122, 86, 93, 116, 155, 108, 120, 70, 141,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 59, 0,
	90, 154, 115, 77, 143, 75, 0, 0, 0, 0,
	89, 0, 91, 0, 0, 124, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 57, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 0, 0, 0, 0, 113, 0, 0, 128, 80,
	79, 88, 0, 0, 0, 71, 0, 119, 109, 140,
	0, 110, 118, 92, 132, 114, 139, 148, 149, 130,
	146, 60, 129, 138, 69, 121, 62, 136, 126, 98,
	84, 85, 61, 0, 117, 74, 78, 73, 106, 133,
	134, 72, 156, 65, 145, 64, 66, 144, 105, 131,
	137, 99, 96, 63, 135, 97, 95, 87, 76, 81,
	111, 94, 112, 82, 102, 101, 103, 0, 0, 0,
	125, 142, 157, 0, 0, 150, 151, 152, 153, 0,
	0, 0, 104, 67, 83, 122, 86, 93, 116, 155,
	108, 120, 70, 141, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 90, 154, 115, 77, 143,
}

var yyPact = [...]int16{
	1691, -1000, -184, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10758, 798, 842, -1000, -1000, -1000, -1000, -1000, -1000,
	642, 7379, 66, 108, 97, 10086, 107, 1207, 10758, -1000,
	9, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 86, -1000,
	-1000, -1000, -1000, -1000, 83, -1000, 599, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 791, 794,
	661, 783, 701, -1000, 5548, 69, 8965, 9862, 4849, -1000,
	522, 102, 10758, -128, 10310, 60, 60, 60, -1000, -1000,
	-1000, -1000, 105, 10758, -1000, 10758, 58, 510, 58, 58,
	58, 10758, -1000, 146, 10758, 493, 751, 67, 2881, 2881,
	2881, 2881, 20, 2881, -84, 662, -1000, -1000, -1000, -1000,
	2881, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 367, -1000, 10758, 780, 10310, 758, 6250, 6250, 798,
	-1000, 86, -1000, -1000, -1000, 749, -1000, -1000, 240, 808,
	-1000, 7155, 143, -1000, 6250, 2020, 599, -1000, -1000, 599,
	-1000, -1000, 118, -1000, -1000, 6698, 6698, 6698, 6698, 6698,
	6698, 6698, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 599, -1000, 6017, 599,
	599, 599, 599, 599, 599, 599, 599, 6250, 599, 599,
	599, 599, 599, 599, 599, 599, 599, 599, 599, 599,
	599, 9638, 552, 362, -1000, -1000, -1000, 776, 8060, 8741,
	10758, 652, -1000, 561, 4603, -101, -1000, -1000, -1000, 209,
	8508, -1000, -1000, -1000, 750, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 521, -1000,
	1880, 490, 2881, 76, 627, 448, 220, 438, 10758, 10758,
	2881, 73, 10758, 774, 660, 10758, 433, 414, -1000, 4357,
	-1000, 2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881, -1000,
	-1000, -1000, -1000, -1000, -1000, 2881, 2881, -1000, -68, -1000,
	10758, -1000, -1000, -1000, -1000, 599, 468, 142, -1000, 834,
	174, 644, 133, 565, -1000, 403, 791, 367, 701, 8284,
	684, -1000, -1000, 10758, -1000, 6250, 6250, 396, -1000, 9413,
	-1000, -1000, 3373, 179, 6698, 337, 195, 6698, 6698, 6698,
	6698, 6698, 6698, 6698, 6698, 6698, 6698, 6698, 6698, 6698,
	6698, 6698, 356, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 404, -1000, 86, 425, 425, 154, 154, 154, 154,
	154, 154, 6922, 5082, 367, 499, 10758, 252, 6017, 5548,
	5548, 6250, 6250, 10534, 10534, 5548, 784, 198, 252, 10534,
	-1000, 367, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5548,
	5548, 5548, 5548, 36, 10758, -1000, 10534, 8965, 8965, 8965,
	8965, 8965, -1000, 698, 696, -1000, 683, 682, 671, 115,
	10758, -1000, 489, 8060, 163, 599, -1000, 9189, -1000, -1000,
	36, 551, 8965, 10758, -1000, -1000, 4111, 561, -101, 559,
	-1000, -93, -89, 5781, 152, -1000, -1000, -1000, -1000, 2635,
	346, 340, -69, -1000, -1000, -1000, 625, -1000, 625, 625,
	625, 625, -29, -29, -29, -29, -1000, -1000, -1000, -1000,
	-1000, 639, 637, -1000, 625, 625, 625, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 629, 629, 629, 634, 634, 655, -1000,
	10758, -145, 399, 2881, 773, 2881, -1000, 91, -1000, 10758,
	-1000, -1000, 10758, 2881, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 253,
	-1000, -1000, -1000, -1000, -1000, 10310, 10310, -1000, 731, 6250,
	6250, 3865, 6250, -1000, -1000, -1000, 758, -1000, 784, 796,
	-1000, 743, 742, 5548, -1000, -1000, 179, 194, -1000, -1000,
	307, -1000, -1000, -1000, -1000, 131, 599, -1000, 2075, -1000,
	-1000, -1000, -1000, 337, 6698, 6698, 6698, 1552, 2075, 1988,
	727, 2089, 154, 318, 318, 156, 156, 156, 156, 156,
	461, 461, -1000, -1000, -1000, 367, -1000, -1000, -1000, 367,
	5548, 560, -1000, -1000, 6250, -1000, 367, 487, 487, 380,
	366, 606, -1000, 127, 596, 487, 5548, 255, -1000, 6250,
	367, -1000, 487, 367, 487, 487, 82, 599, -1000, 626,
	-1000, 207, 362, 651, 659, 203, -1000, -1000, -1000, -1000,
	690, -1000, 689, -1000, 686, -1000, -1000, -1000, -1000, -1000,
	101, 100, 87, 10310, -1000, 806, 8965, 575, -1000, -1000,
	559, -101, -110, -1000, -1000, -1000, 252, -1000, 397, 558,
	2389, -1000, -1000, -1000, -1000, -1000, -1000, 636, 763, 192,
	182, 394, -1000, -1000, 754, -1000, 226, -74, -1000, -1000,
	290, -29, -29, -1000, -1000, 152, 734, 152, 152, 152,
	353, 353, -1000, -1000, -1000, -1000, 288, -1000, -1000, -1000,
	286, -1000, 658, 10310, 2881, -1000, 3619, -1000, -1000, -1000,
	-1000, -1000, -1000, 1414, 1261, 175, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 34, -1000, 2881,
	-1000, 256, 10758, 10758, 126, -1000, 707, 252, 252, 122,
	-1000, -1000, 10758, -1000, -1000, -1000, -1000, 574, -1000, -1000,
	-1000, 3127, 5548, -1000, 1552, 2075, 1928, -1000, 6698, 6698,
	-1000, -1000, 487, 5548, 252, -1000, -1000, -1000, 598, 356,
	598, 6698, 6698, 3865, 6698, 6698, -139, 564, 212, -1000,
	6250, 228, -1000, -1000, -1000, -1000, -1000, 657, 10534, 599,
	-1000, 7836, 10310, 798, 10534, 6250, 6250, -1000, -1000, 6250,
	635, -1000, 6250, -1000, -1000, -1000, -1000, 599, 599, 599,
	458, -1000, 798, 575, -1000, -1000, -1000, -98, -100, -1000,
	-1000, 2635, -1000, 2635, 10310, -1000, 385, 383, -1000, -1000,
	600, 93, -1000, -1000, -1000, 446, 152, 152, -1000, 201,
	-1000, -1000, -1000, 485, -1000, 476, 545, 471, 10758, -1000,
	-1000, 544, -1000, 200, -1000, -1000, 10310, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10310,
	10758, -1000, -1000, -1000, -1000, -1000, 10310, -1000, -1000, 341,
	6250, -1000, -1000, 10310, -1000, 3619, -1000, 806, 8965, -1000,
	-1000, 367, -1000, 6698, 2075, 2075, -1000, -1000, 367, 625,
	625, -1000, 625, 634, 629, 629, -1000, 625, 0, 625,
	-1, -1000, 367, 367, 1878, 2060, -1000, 1850, 2038, 599,
	-135, -1000, 252, 6250, -1000, 759, 526, 529, -1000, -1000,
	5315, 367, 468, 458, 791, -1000, 252, 252, 252, 10310,
	252, 10310, 10310, 10310, 7612, 10310, 791, -1000, -1000, -1000,
	-1000, 2389, -1000, 445, -1000, 625, -1000, -1000, -54, 826,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -29, 329, -29, 276, -1000, 266, 2881, 3619, 2635,
	-1000, 615, -1000, -1000, -1000, -1000, 766, -1000, 252, -1000,
	803, 535, -1000, 2075, -1000, -1000, 99, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6698, 6698,
	-1000, 6698, 6698, 6698, 367, 328, 252, 762, -1000, 599,
	-1000, -1000, 65, -1000, -1000, 442, -1000, 423, 423, 423,
	163, -1000, -1000, 128, 10310, -1000, 153, -1000, -118, 152,
	-1000, 152, 426, 424, -1000, -1000, -1000, 10310, 599, 797,
	793, -1000, -1000, 1913, 1913, 1913, 1913, -16, -1000, -1000,
	825, -1000, 599, -1000, 86, 10310, -1000, -1000, -1000, -1000,
	-1000, 128, -1000, 379, 197, 325, -1000, 231, 760, -1000,
	757, -1000, -1000, -1000, -1000, -1000, 408, 33, -1000, 6250,
	6250, -1000, -1000, -1000, -1000, 367, 56, -149, 10534, 529,
	367, -1000, -1000, -1000, 254, -1000, -1000, -1000, 302, -1000,
	-1000, 627, 371, -1000, 10310, 252, 478, -1000, 704, -143,
	-158, 473, -1000, -1000, -1000, -145, -1000, 33, 741, -1000,
	687, -1000, -1000, -1000, 21, -147, 28, -155, 599, -179,
	6474, -1000, 1913, 367, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1038, 8, 170, 1037, 1036, 1035, 1033, 1031, 1029,
	1028, 1026, 1025, 1023, 1022, 1021, 1020, 1018, 1017, 1015,
	1014, 1013, 1012, 1009, 114, 1006, 1005, 1004, 53, 1003,
	66, 1002, 1001, 34, 131, 41, 26, 307, 1000, 15,
	68, 61, 999, 44, 996, 993, 74, 990, 52, 987,
	982, 1296, 980, 979, 13, 46, 978, 976, 973, 968,
	65, 249, 961, 957, 956, 955, 954, 953, 45, 3,
	5, 38, 16, 951, 150, 6, 950, 42, 949, 948,
	946, 945, 33, 944, 60, 942, 21, 55, 27, 11,
	941, 111, 940, 54, 25, 24, 7, 69, 50, 939,
	18, 51, 43, 938, 937, 152, 936, 935, 934, 933,
	931, 930, 148, 165, 929, 928, 925, 924, 31, 0,
	637, 289, 58, 923, 921, 919, 1331, 62, 59, 17,
	918, 49, 178, 37, 917, 910, 28, 909, 907, 906,
	905, 901, 898, 897, 64, 896, 895, 894, 29, 56,
	893, 891, 20, 23, 890, 885, 883, 40, 48, 880,
	47, 878, 876, 873, 872, 19, 30, 871, 12, 870,
	10, 868, 867, 1, 866, 14, 857, 2, 856, 4,
	35, 855, 854, 72, 391, 853, 851, 101,
}

var yyR1 = [...]uint8{
	0, 181, 182, 182, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 6, 3, 4, 4,
	5, 5, 92, 92, 91, 90, 90, 7, 7, 27,
	27, 8, 9, 9, 9, 185, 185, 46, 46, 93,
	93, 10, 10, 10, 10, 98, 98, 102, 102, 102,
	103, 103, 103, 103, 134, 134, 11, 11, 11, 11,
	11, 11, 11, 179, 179, 178, 177, 177, 176, 176,
	175, 16, 162, 163, 163, 163, 158, 137, 137, 137,
	137, 140, 140, 138, 138, 138, 138, 138, 138, 138,
	139, 139, 139, 139, 139, 141, 141, 141, 141, 141,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 143, 143, 143, 143, 143,
	143, 143, 143, 157, 157, 144, 144, 152, 152, 153,
	153, 153, 150, 150, 151, 151, 154, 154, 154, 145,
	145, 145, 145, 145, 145, 145, 147, 147, 155, 155,
	148, 148, 148, 149, 149, 156, 156, 156, 156, 156,
	146, 146, 159, 159, 171, 171, 170, 170, 170, 161,
	161, 167, 167, 167, 167, 167, 160, 160, 169, 169,
	168, 164, 164, 164, 165, 165, 165, 166, 166, 166,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	174, 172, 172, 173, 173, 13, 14, 14, 14, 14,
	14, 15, 15, 17, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 110, 110, 107,
	107, 108, 108, 109, 109, 109, 111, 111, 111, 135,
	135, 135, 19, 19, 21, 21, 22, 23, 20, 20,
	20, 20, 20, 186, 24, 25, 25, 26, 26, 26,
	30, 30, 30, 28, 28, 29, 29, 35, 35, 34,
	34, 36, 36, 36, 36, 123, 123, 123, 122, 122,
	38, 38, 39, 39, 40, 40, 41, 41, 41, 53,
	53, 89, 89, 94, 94, 42, 42, 42, 42, 43,
	43, 44, 44, 45, 45, 130, 130, 129, 129, 129,
	128, 128, 47, 47, 47, 49, 48, 48, 48, 48,
	48, 48, 50, 50, 52, 52, 51, 51, 54, 54,
	54, 54, 55, 55, 37, 37, 37, 37, 37, 37,
	37, 106, 106, 57, 57, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 67, 67, 67, 67, 67,
	67, 58, 58, 58, 58, 58, 58, 58, 33, 33,
	68, 68, 68, 74, 69, 69, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 65, 65, 65,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 64, 187, 187, 66, 66, 66, 66, 31,
	31, 31, 31, 31, 133, 133, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 78, 78, 32, 32, 76, 76, 77, 79,
	79, 75, 75, 75, 60, 60, 60, 60, 60, 60,
	60, 60, 62, 62, 62, 80, 80, 81, 81, 82,
	82, 83, 83, 84, 85, 85, 85, 86, 86, 86,
	86, 87, 87, 87, 59, 59, 59, 59, 59, 59,
	88, 88, 88, 88, 95, 95, 70, 70, 72, 72,
	71, 73, 96, 96, 100, 97, 97, 101, 101, 101,
	99, 99, 99, 125, 125, 125, 104, 104, 112, 112,
	113, 113, 105, 105, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 115, 115, 115, 116, 116, 117,
	117, 117, 124, 124, 120, 120, 121, 121, 126, 126,
	127, 127, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 183, 184, 131, 132, 132, 132,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 4, 6, 7, 5, 10, 1, 3,
	1, 3, 1, 3, 4, 0, 3, 7, 8, 1,
	1, 8, 8, 7, 6, 1, 1, 1, 3, 0,
	4, 3, 4, 5, 4, 1, 3, 3, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 8, 4, 6,
	5, 5, 5, 0, 2, 1, 0, 2, 1, 3,
	3, 4, 4, 1, 3, 3, 8, 3, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 1,
	4, 4, 2, 2, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 0, 1, 2, 0,
	2, 2, 2, 2, 2, 2, 0, 3, 0, 1,
	0, 3, 3, 0, 2, 0, 2, 1, 2, 1,
	0, 2, 5, 4, 1, 2, 2, 3, 2, 0,
	1, 2, 3, 3, 2, 2, 1, 1, 1, 3,
	2, 0, 1, 3, 1, 2, 3, 1, 1, 1,
	6, 7, 7, 12, 7, 7, 7, 4, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 5, 4, 6, 5, 4,
	4, 3, 2, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 3, 3, 3, 3, 4, 3, 6, 4,
	2, 4, 2, 2, 2, 2, 3, 1, 1, 0,
	1, 0, 1, 0, 2, 2, 0, 2, 2, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 2,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	7, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 6, 8, 8, 6, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 1, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -181, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, 247, -3, -4, 6, 7, -27, 9, 10, 30,
	-16, 113, 114, 116, 115, 141, 117, 134, 49, 153,
	154, 156, 157, 25, 135, 136, 139, 140, -183, 8,
	236, 53, -182, 251, -92, -91, -126, 56, -119, 244,
	153, 164, 158, 185, 177, 175, 178, 215, 66, 156,
	224, 137, 173, 169, 167, 27, 190, 249, 168, 132,
	131, 191, 195, 216, 162, 163, 218, 189, 133, 32,
	246, 34, 145, 219, 193, 188, 184, 187, 161, 183,
	38, 197, 196, 198, 214, 180, 170, 18, 222, 140,
	143, 192, 194, 127, 147, 248, 220, 166, 144, 139,
	223, 157, 217, 226, 37, 202, 160, 59, 130, 154,
	151, 181, 146, 171, 172, 186, 159, 182, 155, 148,
	141, 225, 203, 250, 179, 176, 152, 122, 149, 150,
	207, 208, 209, 210, 247, 221, 174, 204, -82, 15,
	-26, 5, -24, -186, -24, -24, -24, -24, -24, -162,
	53, -117, 122, 71, 149, 228, 119, 120, 126, -120,
	56, -119, -105, 122, 124, 120, 120, 121, 122, 228,
	119, 120, -51, -126, 120, 107, 178, 113, 205, 121,
	32, 147, -135, 120, -107, 150, 207, 208, 209, 210,
	56, 217, 216, 211, -126, 155, -131, -131, -131, -131,
	-131, -2, -2, 54, -90, -183, -86, 17, 16, -5,
	-3, -183, 6, 20, 21, -30, 39, 40, -25, -36,
	98, -37, -126, -56, 73, -61, 29, 56, -119, 23,
	-60, -57, -75, -73, -74, 107, 108, 96, 97, 104,
	74, 109, -65, -63, -64, -66, 58, 57, 67, 60,
	61, 62, 63, 68, 69, 70, -120, -71, -183, 43,
	44, 237, 238, 239, 240, 243, 241, 76, 33, 227,
	235, 234, 233, 231, 232, 229, 230, 125, 228, 102,
	236, -105, -39, -40, -41, -42, -53, -74, -183, -51,
	11, -46, -51, -97, -134, 155, -101, 217, 216, -121,
	-99, -120, -118, 215, 178, 214, 118, 72, 22, 24,
	200, 75, 107, 16, 76, 106, 237, 113, 47, 229,
	230, 227, 239, 240, 228, 205, 29, 10, 25, 135,
	21, 100, 115, 79, 80, 138, 23, 136, 70, 19,
	50, 11, 13, 14, 125, 124, 91, 121, 45, 8,
	109, 26, 88, 41, 28, 43, 89, 17, 231, 232,
	31, 243, 142, 102, 48, 35, 73, 68, 51, 71,
	15, 46, 90, 116, 236, 44, 119, 6, 242, 30,
	134, 42, 120, 206, 78, 123, 69, 5, 126, 9,
	49, 52, 233, 234, 235, 33, 77, 12, -163, -158,
	56, 121, -51, 236, -120, -113, 125, -113, -113, 120,
	-51, -51, -112, 125, 56, -112, -112, -112, -51, 110,
	-51, 56, 30, 228, 56, 147, 120, 148, 122, -132,
	-183, -121, -132, -132, -132, 151, 152, -132, -108, 212,
	51, -132, -184, 55, -91, 22, -88, -120, -87, 19,
	31, -37, -126, -83, -84, -37, -82, -2, -24, 35,
	-28, 21, 65, 11, -123, 72, 71, 88, -122, 22,
	-120, 58, 110, -37, -58, 91, 73, 89, 90, 75,
	93, 92, 103, 96, 97, 98, 99, 100, 101, 102,
	94, 95, 106, 81, 82, 83, 84, 85, 86, 87,
	-106, -183, -74, -183, 111, 112, -61, -61, -61, -61,
	-61, -61, -61, -183, -2, -69, 247, -37, -183, -183,
	-183, -183, -183, -183, -183, -183, -183, -78, -37, -183,
	-187, -183, -187, -187, -187, -187, -187, -187, -187, -183,
	-183, -183, -183, -52, 26, -51, 30, 54, -47, -49,
	-48, -50, 41, 45, 47, 42, 43, 44, 212, 48,
	-130, 22, -39, -183, -129, 143, -128, 22, -126, 58,
	-51, -46, -185, 54, 11, 52, 54, -97, 155, -98,
	-102, 218, 220, 81, -125, -120, 58, 29, 30, 55,
	54, -137, -140, -142, -141, -143, -138, -139, 175, 176,
	107, 179, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 30, 137, 171, 172, 173, 174, 191, 192,
	193, 194, 195, 196, 197, 198, 158, 159, 160, 161,
	162, 163, 164, 166, 167, 168, 169, 170, 56, -132,
	122, -179, 52, 56, 73, 56, -51, -51, -132, 123,
	-51, 23, 51, -51, 56, 56, -127, -126, -118, -132,
	-132, -132, -132, -132, -132, -132, -132, -132, -132, -110,
	206, 213, -51, -74, -184, 54, 110, 9, 91, 54,
	18, 110, 54, -85, 24, 25, -86, -184, -30, -62,
	-120, 60, 63, -29, 42, -51, -37, -37, -67, 68,
	73, 69, 70, -122, 98, -127, -121, -118, -61, -68,
	-71, -74, 64, 91, 89, 90, 75, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -133, 56, 58, 56, -60, -60, -120, -35,
	21, -34, -36, -184, 54, -184, -2, -34, -34, -37,
	-37, -75, -120, -126, -75, -34, -28, -76, -77, 77,
	-75, -184, -34, -35, -34, -34, -93, 143, -51, -96,
	-100, -75, -40, -41, -41, -40, -41, 41, 41, 41,
	46, 41, 46, 41, 46, 41, -48, -126, -184, -54,
	49, 124, 50, -183, -128, -93, 52, -39, -51, -101,
	-98, 54, 219, 221, 222, 51, -37, -149, 106, -164,
	-165, -166, -121, 58, 60, -158, -159, -167, 127, 130,
	126, -160, 121, 28, -154, 68, 73, -150, 203, -144,
	53, -144, -144, -144, -144, -148, 178, -148, -148, -148,
	53, 53, -144, -144, -144, -152, 53, -152, -152, -153,
	53, -153, -124, 52, -51, -177, 247, -178, 56, -132,
	23, -132, -114, 118, 115, 116, -174, 114, 200, 178,
	66, 29, 15, 237, 143, 250, 56, 144, -51, -51,
	-132, -109, 11, 91, -120, -120, 37, -37, -37, -127,
	-84, -87, -104, 19, 11, 33, 33, -34, 68, 69,
	70, 110, -183, -68, -61, -61, -61, -33, 138, 72,
	-184, -184, -34, 54, -37, -184, -184, -184, 54, 52,
	22, 54, 11, 110, 54, 11, -184, -34, -79, -77,
	79, -37, -184, -184, -184, -184, -184, -59, 30, 33,
	-2, -183, -183, -55, 54, 12, 81, -44, -43, 51,
	52, -45, 51, -43, 41, 41, 41, 121, 121, 121,
	-94, -120, -55, -39, -55, -102, -103, 223, 220, 226,
	56, 54, -166, 81, 53, 28, -160, -160, 56, 56,
	-145, 29, 68, -151, 204, 60, -148, -148, -149, 30,
	-149, -149, -149, -157, 58, -157, 60, 60, 51, -120,
	-132, -176, -175, -121, -131, -180, 149, 128, 129, 132,
	131, 56, 121, 28, 127, 130, 143, 126, -180, 149,
	-115, -116, 123, 22, 121, 28, 143, -132, -111, 89,
	12, -126, -126, 110, 38, 110, -51, -38, 11, 98,
	-121, -35, -33, 72, -61, -61, -184, -36, -136, 107,
	175, 137, 173, 169, 168, 167, 189, 180, 202, 171,
	203, 59, -133, -136, -61, -61, -121, -61, -61, 244,
	-82, 80, -37, 78, -95, 51, -96, -70, -72, -71,
	-183, -2, -88, -94, -82, -100, -37, -37, -37, 53,
	-37, -183, -183, -183, -184, 54, -82, -55, 220, 224,
	225, -165, -166, -169, -168, -120, 56, 56, -147, 51,
	58, 60, 61, 68, 227, 67, 55, -149, -149, 56,
	107, 55, 54, 55, 54, 55, 54, -51, 54, 81,
	-131, -120, -131, -120, -51, -131, -120, 58, -37, -120,
	-55, -39, -184, -61, -184, -144, -144, -144, -153, -152,
	-152, -144, 163, -144, 163, -184, -184, -184, 54, 19,
	-184, 54, 19, -183, -32, 242, -37, 27, -95, 54,
	-184, -184, -184, -184, -86, -89, -120, -89, -89, -89,
	-129, -120, -86, 55, 54, -144, -155, 200, 9, -148,
	58, -148, 60, 60, -132, -175, -166, 53, 26, -80,
	13, -148, 56, -61, -61, -61, -61, -61, -184, 58,
	28, -72, 33, -2, -183, 54, 55, -184, -184, -184,
	-54, -171, -170, 52, 133, 66, -168, -156, 127, 28,
	126, 227, -149, -149, 55, 55, -89, -183, -81, 14,
	16, -184, -184, -184, -184, -31, 91, 247, 9, -70,
	-2, -120, -170, 56, -161, 81, 58, -146, 66, 28,
	28, 55, -172, -173, 143, -37, -69, -184, 245, 48,
	248, -96, -184, 60, 58, -179, -184, 54, -120, 38,
	246, 249, -177, -173, 33, 38, 145, 247, 146, 248,
	-183, 249, -61, 142, -184, -184,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 0, 519, 0, 283, 283, 283, 283, 283, 283,
	0, 589, 572, 0, 0, 0, 0, -2, 273, 274,
	0, 276, 277, 795, 795, 795, 795, 795, 0, 39,
	40, 793, 1, 3, 0, 32, 35, 598, 599, 694,
	695, 696, 697, 698, 699, 700, 701, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 527, 0,
	0, 287, 290, 285, 0, 572, 0, 0, 0, 66,
	0, 0, 782, 0, 783, 570, 570, 570, 590, 591,
	594, 595, 0, 0, 573, 0, 568, 0, 568, 568,
	568, 0, 232, 356, 0, 0, 0, 0, 796, 796,
	796, 796, 0, 796, 261, 250, 252, 253, 254, 255,
	796, 270, 271, 260, 272, 275, 278, 279, 280, 281,
	282, 28, 22, 0, 0, 0, 531, 0, 0, 519,
	30, 0, 283, 288, 289, 293, 291, 292, 284, 0,
	301, 305, 0, 364, 0, 369, 371, -2, -2, 0,
	406, 407, 408, 409, 410, 0, 0, 0, 0, 0,
	0, 0, 433, 434, 435, 436, 504, 505, 506, 507,
	508, 509, 510, 511, 373, 374, 501, 551, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 463,
	463, 463, 463, 463, 463, 463, 463, 0, 0, 0,
	0, 0, 0, 312, 314, 315, 316, 335, 0, 337,
	0, 0, 47, 51, 0, 773, 555, -2, -2, 0,
	0, 596, 597, -2, 701, -2, 602, 603, 604, 605,
	606, 607, 608, 609, 610, 611, 612, 613, 614, 615,
	616, 617, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 641, 642, 643, 644, 645,
	646, 647, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 0, 83,
	0, 0, 796, 0, 73, 0, 0, 0, 0, 0,
	796, 0, 0, 0, 0, 0, 0, 0, 231, 0,
	233, 796, 796, 796, 796, 796, 796, 796, 796, 242,
	797, 798, 243, 244, 245, 796, 796, 247, 0, 262,
	0, 256, 29, 794, 33, 0, 0, 540, 23, 0,
	0, 528, 0, 520, 521, 524, 527, 28, 290, 0,
	295, 294, 286, 0, 302, 0, 0, 0, 306, 0,
	308, 309, 0, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 391, 392, 393, 394, 395, 396, 397,
	370, 0, 384, 0, 0, 0, 426, 427, 428, 429,
	430, 431, 0, 297, 28, 0, 789, 404, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 0, 493, 0,
	455, 0, 456, 457, 458, 459, 460, 461, 462, 0,
	297, 0, 0, 49, 0, 355, 0, 0, 0, 0,
	0, 0, 342, 0, 0, 345, 0, 0, 0, 0,
	0, 336, 0, 0, 358, 745, 338, 0, 340, 341,
	-2, 0, 0, 0, 45, 46, 0, 52, 773, 54,
	55, 0, 0, 0, 163, 563, 564, 565, 561, 191,
	0, 146, 142, 88, 89, 90, 135, 92, 135, 135,
	135, 135, 160, 160, 160, 160, 118, 119, 120, 121,
	122, 0, 0, 105, 135, 135, 135, 109, 125, 126,
	127, 128, 129, 130, 131, 132, 93, 94, 95, 96,
	97, 98, 99, 137, 137, 137, 139, 139, 592, 68,
	0, 76, 0, 796, 0, 796, 81, 0, 207, 0,
	226, 569, 0, 796, 229, 230, 357, 600, 601, 234,
	235, 236, 237, 238, 239, 240, 241, 246, 249, 263,
	257, 258, 251, 34, 36, 0, 0, 532, 0, 0,
	0, 0, 0, 523, 525, 526, 531, 31, 293, 0,
	512, 0, 0, 0, 296, 26, 365, 366, 368, 385,
	0, 387, 389, 307, 303, 0, 502, -2, 375, 376,
	400, 401, 402, 0, 0, 0, 0, 398, 380, 0,
	411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
	421, 422, 425, 474, 475, 0, 423, 424, 432, 0,
	0, 298, 299, 403, 0, 550, 28, 0, 0, 0,
	0, 0, 501, 0, 0, 0, 0, 499, 496, 0,
	0, 464, 0, 0, 0, 0, 0, 0, 354, 362,
	552, 0, 313, 331, 333, 0, 328, 343, 344, 346,
	0, 348, 0, 350, 0, 352, 353, 317, 318, 319,
	0, 0, 0, 0, 339, 362, 0, 362, 48, 556,
	53, 0, 0, 58, 59, 557, 558, 559, 0, 82,
	192, 194, 197, 198, 199, 84, 85, 0, 0, 0,
	0, 0, 186, 187, 149, 147, 0, 144, 143, 91,
	0, 160, 160, 112, 113, 163, 0, 163, 163, 163,
	0, 0, 106, 107, 108, 100, 0, 101, 102, 103,
	0, 104, 0, 0, 796, 70, 0, 74, 75, 71,
	571, 72, 795, 0, 0, 584, 208, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 0, 225, 796,
	228, 266, 0, 0, 542, 541, 0, 529, 530, 0,
	522, 24, 0, 566, 567, 513, 514, 310, 386, 388,
	390, 0, 297, 377, 398, 381, 0, 378, 0, 0,
	372, 437, 0, 0, 405, -2, 440, 441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 519, 0, 497,
	0, 0, 454, 465, 466, 467, 468, 544, 0, 0,
	-2, 0, 0, 519, 0, 0, 0, 325, 332, 0,
	0, 326, 0, 327, 347, 349, 351, 0, 0, 0,
	0, 323, 519, 362, 44, 56, 57, 0, 0, 63,
	164, 0, 195, 0, 0, 181, 0, 0, 184, 185,
	156, 0, 148, 87, 145, 0, 163, 163, 114, 0,
	115, 116, 117, 0, 133, 0, 0, 0, 0, 593,
	69, 77, 78, 0, 200, 795, 0, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 795, 0,
	0, 795, 585, 586, 587, 588, 0, 227, 248, 0,
	0, 264, 265, 0, 533, 0, 25, 362, 0, 304,
	503, 0, 379, 0, 399, 382, 438, 300, 0, 135,
	135, 479, 135, 139, 137, 137, 484, 135, 486, 135,
	489, 491, 0, 0, 0, 0, 502, 0, 0, 0,
	494, 453, 500, 0, 37, 0, 544, 534, 546, 548,
	0, 28, 0, 0, 527, 553, 363, 554, 329, 0,
	334, 0, 0, 0, 337, 0, 527, 43, 60, 61,
	62, 193, 196, 0, 188, 135, 182, 183, 158, 0,
	150, 151, 152, 153, 154, 155, 136, 110, 111, 161,
	162, 160, 0, 160, 0, 140, 0, 796, 0, 0,
	201, 0, 202, 204, 205, 206, 0, 267, 268, 543,
	515, 311, 439, 383, 442, 476, 160, 480, 481, 482,
	483, 485, 487, 488, 490, 444, 443, 445, 0, 0,
	448, 0, 0, 0, 0, 0, 498, 0, 38, 0,
	549, -2, 0, 50, 41, 0, 321, 0, 0, 0,
	358, 324, 42, 173, 0, 190, 165, 159, 0, 163,
	134, 163, 0, 0, 67, 79, 80, 0, 0, 517,
	0, 477, 478, 0, 0, 0, 0, 469, 452, 495,
	0, 547, 0, -2, 0, 0, 330, 359, 360, 361,
	320, 172, 174, 0, 179, 0, 189, 170, 0, 167,
	169, 157, 123, 124, 138, 141, 0, 0, 27, 0,
	0, 446, 447, 449, 450, 0, 0, 0, 0, 537,
	28, 322, 175, 176, 0, 180, 178, 86, 0, 166,
	168, 73, 0, 221, 0, 518, 516, 451, 0, 0,
	0, 545, -2, 177, 171, 76, 220, 0, 0, 470,
	0, 473, 203, 222, 0, 471, 0, 0, 0, 0,
	0, 472, 0, 0, 223, 224,
}

var yyTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 251,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:306
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:311
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:312
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:316
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:339
		{
			yyVAL.selStmt = &With{CTEs: yyDollar[2].commonTableExprs, Stmt: yyDollar[3].selStmt}
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:343
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:351
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:355
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:361
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:368
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:374
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:378
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:384
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:388
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:394
		{
			yyVAL.commonTableExprs = CommonTableExprs{yyDollar[1].commonTableExpr}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:398
		{
			yyVAL.commonTableExprs = append(yyDollar[1].commonTableExprs, yyDollar[3].commonTableExpr)
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:404
		{
			yyVAL.commonTableExpr = &CommonTableExpr{Name: yyDollar[1].tableIdent, Columns: yyDollar[2].columns, Subquery: yyDollar[4].subquery}
		}
	case 35:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:409
		{
			yyVAL.columns = nil
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:413
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:420
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:432
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:444
		{
			yyVAL.str = InsertStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:448
		{
			yyVAL.str = ReplaceStr
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:454
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:460
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:464
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:468
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:473
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:474
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:478
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:482
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:487
		{
			yyVAL.partitions = nil
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:491
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:497
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:501
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:505
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:509
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:515
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:519
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:525
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:529
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:533
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:539
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:543
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:547
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:551
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:557
		{
			yyVAL.str = SessionStr
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:561
		{
			yyVAL.str = GlobalStr
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:567
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:572
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:577
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:581
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:585
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:593
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:597
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:602
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:606
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:612
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:617
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:622
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:628
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:633
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:639
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:645
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:652
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:659
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:664
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:668
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:674
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:685
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:696
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:701
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:707
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:711
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:715
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:719
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:723
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:731
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 124:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:893
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:898
		{
			yyVAL.optVal = nil
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:902
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:907
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:911
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:919
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:923
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:929
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:937
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:941
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:946
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:950
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:956
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:960
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:964
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:969
		{
			yyVAL.optVal = nil
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:973
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:977
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:981
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:985
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:989
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:993
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:998
		{
			yyVAL.optVal = nil
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1002
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1007
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1011
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1016
		{
			yyVAL.str = ""
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1020
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1024
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1029
		{
			yyVAL.str = ""
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1033
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1038
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1042
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1046
		{
			yyVAL.colKeyOpt = colKey
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1050
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1054
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1059
		{
			yyVAL.optVal = nil
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1063
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1069
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1073
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1079
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1083
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1089
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1093
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1098
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1104
		{
			yyVAL.str = ""
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1108
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1114
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1118
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1122
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1126
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1130
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1136
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1140
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1146
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1150
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1156
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1161
		{
			yyVAL.str = ""
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1165
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1169
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1177
		{
			yyVAL.str = yyDollar[1].str
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1181
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1185
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1191
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1195
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1199
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1205
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1209
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 202:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1213
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 203:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1217
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1230
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 205:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1240
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 206:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1245
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1250
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 208:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1254
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1273
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1279
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1283
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 223:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1289
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 224:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1293
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1299
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1305
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 227:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1313
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1318
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1326
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1330
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1336
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1345
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1351
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1355
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1359
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1364
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1368
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1372
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1376
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1380
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1384
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1388
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1392
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1396
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1400
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1404
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1408
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1418
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1422
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1426
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1430
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1434
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1438
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1442
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1452
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1458
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1462
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1468
		{
			yyVAL.str = ""
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1472
		{
			yyVAL.str = "extended "
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1478
		{
			yyVAL.str = ""
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1482
		{
			yyVAL.str = "full "
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1488
		{
			yyVAL.str = ""
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1492
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1496
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1502
		{
			yyVAL.showFilter = nil
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1506
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1510
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1516
		{
			yyVAL.str = ""
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1520
		{
			yyVAL.str = SessionStr
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1524
		{
			yyVAL.str = GlobalStr
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1530
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1534
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1540
		{
			yyVAL.statement = &Begin{}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1544
		{
			yyVAL.statement = &Begin{}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &Commit{}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1556
		{
			yyVAL.statement = &Rollback{}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1562
		{
			yyVAL.statement = &OtherRead{}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1566
		{
			yyVAL.statement = &OtherRead{}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &OtherRead{}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1578
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1583
		{
			setAllowComments(yylex, true)
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1587
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1593
		{
			yyVAL.bytes2 = nil
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1597
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1603
		{
			yyVAL.str = UnionStr
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1607
		{
			yyVAL.str = UnionAllStr
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1611
		{
			yyVAL.str = UnionDistinctStr
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1616
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1620
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1624
		{
			yyVAL.str = SQLCacheStr
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1629
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1633
		{
			yyVAL.str = DistinctStr
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1638
		{
			yyVAL.str = ""
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1642
		{
			yyVAL.str = StraightJoinHint
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1647
		{
			yyVAL.selectExprs = nil
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1651
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1657
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1661
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1667
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1671
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1675
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1679
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1684
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1688
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1692
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1699
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1704
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1708
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1714
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1718
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1728
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1732
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1736
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1742
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 320:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1746
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1752
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1756
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1762
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1766
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1779
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1783
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1787
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1791
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1797
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1799
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1803
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1805
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1809
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1811
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1814
		{
			yyVAL.empty = struct{}{}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1816
		{
			yyVAL.empty = struct{}{}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1819
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1823
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1827
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1834
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1840
		{
			yyVAL.str = JoinStr
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1844
		{
			yyVAL.str = JoinStr
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1848
		{
			yyVAL.str = JoinStr
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1854
		{
			yyVAL.str = StraightJoinStr
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1860
		{
			yyVAL.str = LeftJoinStr
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1864
		{
			yyVAL.str = LeftJoinStr
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1868
		{
			yyVAL.str = RightJoinStr
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1872
		{
			yyVAL.str = RightJoinStr
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1876
		{
			yyVAL.str = FullOuterJoinStr
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1880
		{
			yyVAL.str = FullOuterJoinStr
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1886
		{
			yyVAL.str = NaturalJoinStr
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1890
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1900
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1904
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1910
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1914
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1919
		{
			yyVAL.indexHints = nil
		}
	case 359:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1923
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 360:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1927
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 361:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1931
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1936
		{
			yyVAL.expr = nil
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1940
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1946
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1950
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1954
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1958
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1962
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1966
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1970
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1976
		{
			yyVAL.str = ""
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1980
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1986
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1990
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1996
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2000
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2004
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2008
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2012
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2016
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2020
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2024
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 383:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2028
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2032
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2038
		{
			yyVAL.str = IsNullStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2042
		{
			yyVAL.str = IsNotNullStr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2046
		{
			yyVAL.str = IsTrueStr
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2050
		{
			yyVAL.str = IsNotTrueStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2054
		{
			yyVAL.str = IsFalseStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2058
		{
			yyVAL.str = IsNotFalseStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2064
		{
			yyVAL.str = EqualStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2068
		{
			yyVAL.str = LessThanStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2072
		{
			yyVAL.str = GreaterThanStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2076
		{
			yyVAL.str = LessEqualStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2080
		{
			yyVAL.str = GreaterEqualStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2084
		{
			yyVAL.str = NotEqualStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2088
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2093
		{
			yyVAL.expr = nil
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2097
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2103
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2107
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2111
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2117
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2123
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2127
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2133
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2137
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2141
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2145
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2149
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2153
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2157
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2161
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2165
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2169
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2173
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2177
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2181
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2185
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2189
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2193
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2197
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2201
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2205
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2209
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2213
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2217
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2221
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2229
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2243
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2247
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2251
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2269
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 438:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2273
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 439:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2277
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2287
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2291
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 442:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2295
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 443:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2299
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType, Cast: true}
		}
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2303
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 445:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2307
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 446:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2311
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 447:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2315
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2319
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 449:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2323
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 450:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2327
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 451:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2331
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 452:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2335
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2339
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2343
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2353
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2357
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2361
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2365
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2370
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2375
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2385
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2399
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2403
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2407
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2417
		{
			yyVAL.str = ""
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2421
		{
			yyVAL.str = BooleanModeStr
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2425
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 472:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2429
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2433
		{
			yyVAL.str = QueryExpansionStr
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2439
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2443
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2449
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2453
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2457
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2461
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2465
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2469
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2475
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2481
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2487
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2491
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2495
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2499
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2503
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2507
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2511
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2515
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2520
		{
			yyVAL.expr = nil
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2524
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2529
		{
			yyVAL.str = string("")
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2533
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2539
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2543
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2549
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2554
		{
			yyVAL.expr = nil
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2558
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2564
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2568
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 503:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2572
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2578
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2582
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2586
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2590
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2594
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2598
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2602
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2606
		{
			yyVAL.expr = &NullVal{}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2612
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2621
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2625
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2630
		{
			yyVAL.exprs = nil
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2634
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = nil
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2643
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2648
		{
			yyVAL.orderBy = nil
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2652
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2658
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2662
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2668
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2673
		{
			yyVAL.str = AscScr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2677
		{
			yyVAL.str = AscScr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2681
		{
			yyVAL.str = DescScr
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2686
		{
			yyVAL.limit = nil
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2690
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2694
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2698
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2703
		{
			yyVAL.str = ""
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2707
		{
			yyVAL.str = ForUpdateStr
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2711
		{
			yyVAL.str = ShareModeStr
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2724
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2728
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2732
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 537:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2737
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2741
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 539:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2745
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2752
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2756
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2760
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 543:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2764
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2769
		{
			yyVAL.updateExprs = nil
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2773
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2779
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2783
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2789
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2793
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2799
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2805
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2815
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2819
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2825
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2831
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2835
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2841
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2845
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2849
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2856
		{
			yyVAL.bytes = []byte("charset")
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2863
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2867
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2871
		{
			yyVAL.expr = &Default{}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2880
		{
			yyVAL.byt = 0
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2882
		{
			yyVAL.byt = 1
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2885
		{
			yyVAL.empty = struct{}{}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2887
		{
			yyVAL.empty = struct{}{}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2890
		{
			yyVAL.str = ""
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2892
		{
			yyVAL.str = IgnoreStr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2896
		{
			yyVAL.empty = struct{}{}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2898
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2900
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2902
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2904
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2906
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2908
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2910
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2912
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2914
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2917
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2919
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2921
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2925
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2927
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2930
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2932
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2934
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2937
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2939
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2943
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2947
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2954
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2960
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2964
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2971
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3188
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3197
		{
			decNesting(yylex)
		}
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3202
		{
			forceEOF(yylex)
		}
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3207
		{
			forceEOF(yylex)
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3211
		{
			forceEOF(yylex)
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3215
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
