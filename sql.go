// Code generated by goyacc -o sql.go -v sql.output sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	commonTableExpr   *CommonTableExpr
	commonTableExprs  CommonTableExprs
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const STRINGKW = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const UNIQUE = 57451
const PRIMARY = 57452
const COLUMN = 57453
const CONSTRAINT = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const MAXVALUE = 57467
const PARTITION = 57468
const REORGANIZE = 57469
const LESS = 57470
const THAN = 57471
const PROCEDURE = 57472
const TRIGGER = 57473
const VINDEX = 57474
const VINDEXES = 57475
const STATUS = 57476
const VARIABLES = 57477
const BEGIN = 57478
const START = 57479
const TRANSACTION = 57480
const COMMIT = 57481
const ROLLBACK = 57482
const BIT = 57483
const TINYINT = 57484
const SMALLINT = 57485
const MEDIUMINT = 57486
const INT = 57487
const INTEGER = 57488
const BIGINT = 57489
const INTNUM = 57490
const REAL = 57491
const DOUBLE = 57492
const FLOAT_TYPE = 57493
const DECIMAL = 57494
const NUMERIC = 57495
const TIME = 57496
const TIMESTAMP = 57497
const DATETIME = 57498
const YEAR = 57499
const CHAR = 57500
const VARCHAR = 57501
const BOOL = 57502
const CHARACTER = 57503
const VARBINARY = 57504
const NCHAR = 57505
const TEXT = 57506
const TINYTEXT = 57507
const MEDIUMTEXT = 57508
const LONGTEXT = 57509
const BLOB = 57510
const TINYBLOB = 57511
const MEDIUMBLOB = 57512
const LONGBLOB = 57513
const JSON = 57514
const ENUM = 57515
const GEOMETRY = 57516
const POINT = 57517
const LINESTRING = 57518
const POLYGON = 57519
const GEOMETRYCOLLECTION = 57520
const MULTIPOINT = 57521
const MULTILINESTRING = 57522
const MULTIPOLYGON = 57523
const NULLX = 57524
const AUTO_INCREMENT = 57525
const APPROXNUM = 57526
const SIGNED = 57527
const UNSIGNED = 57528
const ZEROFILL = 57529
const DATABASES = 57530
const TABLES = 57531
const VITESS_KEYSPACES = 57532
const VITESS_SHARDS = 57533
const VITESS_TABLETS = 57534
const VSCHEMA_TABLES = 57535
const EXTENDED = 57536
const FULL = 57537
const PROCESSLIST = 57538
const NAMES = 57539
const CHARSET = 57540
const GLOBAL = 57541
const SESSION = 57542
const ISOLATION = 57543
const LEVEL = 57544
const READ = 57545
const WRITE = 57546
const ONLY = 57547
const REPEATABLE = 57548
const COMMITTED = 57549
const UNCOMMITTED = 57550
const SERIALIZABLE = 57551
const CURRENT_TIMESTAMP = 57552
const DATABASE = 57553
const CURRENT_DATE = 57554
const CURRENT_TIME = 57555
const LOCALTIME = 57556
const LOCALTIMESTAMP = 57557
const UTC_DATE = 57558
const UTC_TIME = 57559
const UTC_TIMESTAMP = 57560
const REPLACE = 57561
const CONVERT = 57562
const CAST = 57563
const SUBSTR = 57564
const SUBSTRING = 57565
const GROUP_CONCAT = 57566
const SEPARATOR = 57567
const MATCH = 57568
const AGAINST = 57569
const BOOLEAN = 57570
const LANGUAGE = 57571
const WITH = 57572
const QUERY = 57573
const EXPANSION = 57574
const UNUSED = 57575

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"STRINGKW",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 22,
	5, 29,
	-2, 23,
	-1, 35,
	151, 270,
	152, 270,
	-2, 260,
	-1, 222,
	5, 29,
	-2, 22,
	-1, 234,
	110, 605,
	-2, 601,
	-1, 235,
	110, 606,
	-2, 602,
	-1, 305,
	81, 764,
	-2, 65,
	-1, 306,
	81, 725,
	-2, 66,
	-1, 311,
	81, 709,
	-2, 567,
	-1, 313,
	81, 746,
	-2, 569,
	-1, 576,
	52, 48,
	54, 48,
	-2, 50,
	-1, 708,
	110, 608,
	-2, 604,
	-1, 923,
	5, 30,
	-2, 404,
	-1, 1194,
	5, 30,
	-2, 543,
	-1, 1295,
	5, 30,
	-2, 546,
}

const yyPrivate = 57344

const yyLast = 11066

var yyAct = [...]int16{
	265, 51, 1285, 857, 771, 1245, 239, 1098, 1125, 521,
	791, 813, 1099, 264, 1198, 568, 647, 570, 1010, 951,
	1095, 851, 847, 812, 837, 520, 3, 968, 216, 466,
	310, 1063, 831, 915, 450, 741, 679, 772, 809, 684,
	1013, 1001, 734, 744, 823, 211, 586, 956, 711, 760,
	407, 768, 51, 459, 292, 572, 51, 556, 225, 585,
	304, 910, 473, 241, 690, 301, 299, 54, 158, 1316,
	291, 48, 874, 48, 1306, 48, 1314, 221, 1293, 1312,
	858, 1305, 1090, 1188, 411, 1254, 873, 56, 212, 213,
	214, 215, 237, 160, 161, 162, 163, 946, 1235, 1292,
	947, 1120, 1121, 185, 181, 182, 183, 1119, 535, 976,
	804, 46, 975, 878, 587, 977, 588, 220, 52, 432,
	52, 676, 52, 872, 805, 806, 447, 787, 677, 562,
	563, 992, 830, 1268, 487, 486, 496, 497, 489, 490,
	491, 492, 493, 494, 495, 488, 1210, 420, 498, 838,
	413, 1177, 1175, 1225, 177, 462, 235, 210, 743, 443,
	444, 1313, 296, 558, 561, 562, 563, 559, 1311, 560,
	565, 869, 866, 867, 1286, 865, 1034, 290, 59, 1131,
	769, 1132, 1133, 434, 1246, 436, 176, 421, 1136, 1134,
	59, 414, 179, 59, 438, 438, 438, 438, 1248, 438,
	876, 879, 226, 178, 1252, 179, 438, 1031, 655, 646,
	433, 435, 184, 1033, 967, 792, 794, 825, 417, 455,
	966, 965, 409, 189, 825, 295, 180, 510, 511, 1056,
	1052, 810, 887, 931, 507, 871, 908, 509, 558, 561,
	562, 563, 559, 709, 560, 565, 695, 477, 957, 958,
	427, 498, 986, 488, 1140, 472, 498, 870, 884, 1277,
	1150, 954, 589, 1092, 519, 1247, 523, 524, 525, 526,
	527, 528, 529, 530, 531, 838, 534, 536, 536, 536,
	536, 536, 536, 536, 536, 544, 545, 546, 547, 1269,
	793, 431, 471, 470, 875, 761, 1291, 569, 564, 1094,
	508, 1021, 1253, 1251, 1038, 1141, 1032, 877, 1030, 472,
	824, 464, 21, 650, 21, 289, 21, 824, 59, 59,
	176, 990, 415, 416, 59, 718, 176, 471, 470, 1019,
	454, 423, 424, 425, 564, 59, 1280, 59, 885, 716,
	717, 715, 1296, 59, 472, 548, 59, 470, 1135, 825,
	176, 176, 176, 176, 761, 176, 938, 1216, 928, 827,
	295, 1215, 176, 472, 828, 577, 1005, 1004, 583, 1021,
	491, 492, 493, 494, 495, 488, 993, 408, 498, 1275,
	59, 1037, 176, 1297, 52, 176, 537, 538, 539, 540,
	541, 542, 543, 1278, 1020, 714, 735, 1019, 736, 1025,
	1022, 1015, 1016, 1023, 1018, 1017, 1232, 471, 470, 564,
	1213, 438, 1158, 892, 893, 463, 1024, 1002, 1128, 438,
	1127, 927, 1027, 926, 472, 905, 906, 907, 1300, 463,
	438, 438, 438, 438, 438, 438, 438, 438, 1238, 1283,
	471, 470, 824, 987, 438, 438, 59, 822, 820, 1238,
	463, 821, 978, 59, 59, 59, 51, 472, 664, 176,
	471, 470, 1020, 1238, 1239, 176, 509, 1025, 1022, 1015,
	1016, 1023, 1018, 1017, 1184, 463, 1258, 472, 700, 702,
	703, 687, 686, 701, 1024, 1207, 1206, 1116, 463, 662,
	1014, 694, 463, 1257, 889, 712, 486, 496, 497, 489,
	490, 491, 492, 493, 494, 495, 488, 860, 708, 498,
	51, 737, 487, 486, 496, 497, 489, 490, 491, 492,
	493, 494, 495, 488, 523, 688, 498, 1147, 1146, 692,
	888, 1143, 1144, 1143, 1142, 753, 756, 704, 661, 706,
	660, 762, 921, 463, 1137, 713, 651, 471, 470, 748,
	553, 463, 263, 649, 296, 296, 296, 296, 296, 773,
	746, 463, 746, 644, 472, 596, 595, 176, 429, 422,
	569, 408, 795, 59, 59, 176, 22, 59, 952, 296,
	59, 765, 174, 1163, 59, 1192, 176, 176, 176, 176,
	176, 176, 176, 176, 799, 748, 758, 553, 228, 1096,
	176, 176, 952, 738, 739, 59, 953, 217, 580, 775,
	776, 48, 778, 1149, 798, 953, 579, 295, 295, 295,
	295, 295, 693, 788, 774, 59, 921, 777, 797, 796,
	1145, 176, 222, 295, 839, 840, 841, 833, 834, 835,
	836, 979, 295, 801, 802, 933, 921, 817, 553, 581,
	438, 579, 438, 844, 845, 846, 195, 952, 52, 223,
	438, 552, 803, 849, 850, 853, 930, 921, 254, 253,
	890, 256, 257, 258, 259, 176, 745, 747, 255, 260,
	205, 582, 52, 749, 750, 553, 456, 648, 932, 757,
	1220, 832, 763, 848, 489, 490, 491, 492, 493, 494,
	495, 488, 852, 764, 498, 766, 767, 59, 909, 929,
	59, 59, 59, 59, 59, 1110, 309, 982, 957, 958,
	855, 894, 412, 59, 790, 843, 59, 842, 165, 712,
	59, 190, 439, 52, 1130, 59, 59, 192, 1096, 176,
	708, 964, 896, 1006, 198, 194, 309, 309, 309, 309,
	960, 309, 176, 658, 448, 785, 783, 781, 309, 902,
	786, 784, 782, 963, 911, 962, 460, 461, 1310, 949,
	950, 196, 780, 779, 200, 1304, 1160, 1041, 467, 713,
	1309, 475, 487, 486, 496, 497, 489, 490, 491, 492,
	493, 494, 495, 488, 948, 1050, 498, 691, 1049, 296,
	232, 680, 191, 59, 997, 594, 176, 430, 176, 937,
	989, 689, 59, 681, 971, 59, 176, 970, 1282, 972,
	1281, 1233, 983, 1190, 980, 961, 1221, 862, 916, 193,
	478, 201, 202, 203, 204, 208, 657, 567, 465, 691,
	207, 206, 451, 895, 457, 458, 176, 1289, 1048, 452,
	973, 176, 176, 217, 1288, 309, 1047, 438, 994, 995,
	1185, 591, 295, 1262, 522, 953, 984, 985, 468, 1270,
	1211, 886, 219, 533, 159, 578, 996, 53, 998, 999,
	1000, 1, 438, 859, 1009, 1003, 868, 1284, 1244, 1124,
	819, 811, 406, 918, 164, 1276, 307, 919, 818, 1250,
	1209, 920, 826, 991, 923, 924, 925, 1026, 829, 1129,
	1012, 1279, 988, 934, 601, 599, 600, 935, 940, 598,
	941, 942, 943, 944, 603, 602, 597, 197, 302, 566,
	1044, 1045, 590, 487, 486, 496, 497, 489, 490, 491,
	492, 493, 494, 495, 488, 1055, 1057, 498, 1101, 854,
	51, 1097, 176, 773, 469, 59, 166, 1029, 1028, 773,
	1084, 1100, 708, 309, 1091, 1062, 1112, 1113, 1114, 176,
	1083, 309, 864, 1036, 675, 1102, 883, 446, 1104, 1103,
	1105, 199, 309, 309, 309, 309, 309, 309, 309, 309,
	1106, 1118, 506, 1123, 1046, 974, 309, 309, 308, 1117,
	55, 224, 891, 1122, 683, 1287, 1261, 936, 532, 759,
	240, 699, 176, 176, 252, 176, 496, 497, 489, 490,
	491, 492, 493, 494, 495, 488, 249, 475, 498, 251,
	309, 250, 897, 1138, 1139, 307, 945, 480, 176, 238,
	230, 59, 59, 512, 513, 514, 515, 516, 517, 518,
	682, 685, 294, 549, 557, 555, 554, 959, 955, 1151,
	1051, 293, 1162, 1187, 1267, 176, 901, 24, 218, 697,
	698, 740, 1153, 288, 19, 1156, 1061, 18, 17, 20,
	16, 754, 754, 15, 14, 28, 13, 754, 12, 11,
	1171, 1186, 1172, 1173, 10, 9, 8, 1168, 1169, 7,
	1170, 6, 5, 4, 453, 754, 176, 176, 47, 2,
	0, 1174, 0, 1176, 0, 0, 0, 0, 1191, 0,
	0, 0, 522, 0, 1115, 751, 752, 1200, 1201, 1202,
	0, 0, 0, 1203, 980, 309, 176, 0, 176, 176,
	1197, 0, 0, 0, 0, 0, 0, 0, 309, 438,
	0, 0, 1205, 0, 0, 0, 0, 0, 0, 1208,
	0, 0, 1219, 59, 296, 0, 0, 1212, 1218, 1214,
	0, 176, 0, 0, 0, 0, 0, 0, 0, 1223,
	0, 0, 1222, 0, 176, 59, 0, 0, 808, 0,
	0, 176, 0, 1101, 1224, 0, 1237, 0, 0, 0,
	0, 0, 309, 59, 309, 1234, 1100, 0, 0, 176,
	707, 1165, 309, 176, 1243, 0, 1249, 0, 0, 1167,
	0, 1236, 1260, 0, 0, 0, 0, 295, 0, 0,
	0, 0, 0, 0, 0, 1259, 1101, 0, 51, 1178,
	1179, 1180, 898, 1271, 1183, 0, 0, 903, 904, 1100,
	1274, 1255, 0, 1256, 0, 0, 0, 1193, 1194, 1195,
	1196, 0, 309, 1272, 0, 0, 0, 176, 0, 176,
	176, 176, 59, 176, 0, 1294, 0, 773, 0, 176,
	0, 710, 0, 0, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 1303,
	1298, 0, 1307, 1308, 0, 176, 176, 176, 0, 0,
	1058, 0, 0, 0, 1315, 307, 0, 437, 0, 0,
	59, 0, 0, 0, 0, 0, 0, 0, 814, 0,
	487, 486, 496, 497, 489, 490, 491, 492, 493, 494,
	495, 488, 0, 1231, 498, 922, 0, 0, 969, 0,
	0, 0, 0, 0, 0, 0, 1240, 1241, 1242, 0,
	939, 0, 0, 0, 176, 309, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	0, 0, 1263, 1264, 1265, 1266, 0, 0, 0, 0,
	0, 0, 479, 0, 0, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1181, 463, 1007, 309,
	0, 309, 0, 0, 57, 0, 0, 0, 0, 0,
	0, 0, 0, 1290, 0, 297, 188, 0, 1295, 209,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	1299, 0, 707, 176, 487, 486, 496, 497, 489, 490,
	491, 492, 493, 494, 495, 488, 0, 0, 498, 187,
	0, 309, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1319, 1320, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 1042, 1043, 685,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 754,
	0, 0, 467, 969, 0, 754, 0, 0, 0, 0,
	0, 0, 440, 441, 442, 0, 445, 912, 913, 914,
	0, 0, 0, 449, 0, 0, 0, 0, 0, 0,
	1082, 0, 309, 0, 309, 1126, 0, 1093, 0, 0,
	0, 0, 0, 0, 0, 814, 0, 0, 0, 0,
	0, 229, 1107, 1108, 188, 188, 1109, 0, 0, 1111,
	188, 0, 0, 0, 0, 0, 0, 1152, 0, 0,
	0, 188, 0, 188, 0, 0, 0, 0, 1064, 188,
	1154, 0, 188, 0, 0, 0, 0, 1157, 300, 0,
	0, 1011, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 418, 1164, 419, 0, 1066, 309,
	0, 0, 426, 0, 0, 428, 57, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1071, 1072, 1073, 1074, 1075, 1076, 0, 1159, 1070, 1069,
	1068, 1054, 1080, 0, 1067, 0, 1065, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 0, 0,
	1077, 0, 0, 1199, 1087, 1199, 1199, 1199, 0, 1204,
	0, 0, 0, 1079, 1081, 309, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 0, 0, 188,
	574, 188, 0, 1189, 0, 0, 0, 0, 0, 0,
	522, 309, 309, 309, 0, 0, 0, 0, 0, 0,
	0, 0, 814, 0, 814, 551, 0, 1059, 1060, 1182,
	0, 0, 0, 0, 576, 0, 0, 0, 645, 0,
	1085, 1086, 0, 1088, 1089, 0, 654, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 665, 666, 667,
	668, 669, 670, 671, 672, 0, 0, 0, 0, 0,
	1126, 673, 674, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1199, 487, 486, 496, 497, 489, 490,
	491, 492, 493, 494, 495, 488, 0, 0, 498, 1054,
	0, 1273, 487, 486, 496, 497, 489, 490, 491, 492,
	493, 494, 495, 488, 917, 0, 498, 0, 0, 188,
	188, 0, 0, 188, 0, 0, 188, 0, 0, 0,
	663, 0, 0, 754, 487, 486, 496, 497, 489, 490,
	491, 492, 493, 494, 495, 488, 0, 0, 498, 1301,
	0, 188, 652, 653, 0, 0, 656, 0, 0, 659,
	0, 0, 0, 0, 0, 814, 0, 0, 0, 1166,
	0, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	663, 0, 0, 0, 678, 0, 0, 0, 0, 0,
	0, 0, 1011, 814, 0, 0, 0, 1302, 522, 0,
	0, 0, 0, 0, 696, 487, 486, 496, 497, 489,
	490, 491, 492, 493, 494, 495, 488, 0, 0, 498,
	0, 0, 229, 0, 0, 0, 0, 229, 229, 0,
	0, 755, 755, 229, 0, 0, 0, 755, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 229, 229, 229,
	229, 0, 0, 188, 0, 755, 188, 188, 188, 188,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 789,
	0, 0, 188, 0, 0, 0, 574, 861, 0, 863,
	0, 188, 188, 0, 0, 0, 770, 882, 0, 0,
	0, 0, 1226, 1227, 0, 1228, 1229, 1230, 0, 48,
	23, 49, 25, 26, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 800, 0, 0, 41, 0,
	0, 0, 0, 27, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 36, 0, 0, 0, 52, 0, 0, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 856, 0, 0, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 881, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 618, 29, 30, 32, 31,
	34, 0, 663, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1317, 35, 42, 43,
	0, 0, 44, 45, 33, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 229, 37, 38, 0, 39,
	40, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 229, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 1008, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 0, 0, 0, 1035,
	0, 0, 619, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 0, 632, 633, 634, 635, 636, 637, 638,
	21, 639, 640, 641, 642, 643, 620, 621, 622, 623,
	604, 605, 0, 0, 607, 0, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 624, 625, 626, 627,
	628, 629, 630, 631, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1039, 1040, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 229, 0, 0, 0, 0, 0,
	0, 0, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 229, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 663, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 482, 755,
	485, 0, 0, 0, 0, 755, 499, 500, 501, 502,
	503, 504, 505, 0, 483, 484, 481, 487, 486, 496,
	497, 489, 490, 491, 492, 493, 494, 495, 488, 0,
	0, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1148, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1217, 0, 0, 0,
	0, 0, 1161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 574, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 395, 385, 188, 357, 397, 335,
	349, 405, 350, 351, 378, 321, 365, 108, 347, 0,
	338, 316, 344, 317, 336, 359, 76, 362, 334, 387,
	368, 90, 403, 92, 373, 0, 125, 101, 0, 0,
	361, 389, 363, 383, 356, 379, 326, 372, 398, 348,
	376, 399, 0, 0, 0, 175, 0, 815, 128, 816,
	0, 0, 0, 0, 0, 69, 0, 375, 394, 346,
	377, 315, 374, 0, 319, 322, 404, 392, 341, 342,
	981, 0, 0, 0, 0, 0, 0, 360, 364, 380,
	354, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 371, 0, 0, 0, 323, 320, 0, 358, 0,
	0, 0, 325, 755, 340, 381, 0, 314, 384, 390,
	355, 148, 393, 353, 352, 396, 114, 0, 0, 129,
	81, 80, 89, 388, 337, 345, 72, 343, 120, 110,
	141, 370, 111, 119, 93, 133, 115, 140, 149, 150,
	131, 147, 61, 130, 139, 70, 122, 63, 137, 127,
	99, 85, 86, 62, 0, 118, 75, 79, 74, 107,
	134, 135, 73, 156, 66, 146, 65, 67, 145, 106,
	132, 138, 100, 97, 64, 136, 98, 96, 88, 77,
	82, 112, 95, 113, 83, 103, 102, 104, 0, 318,
	0, 126, 143, 157, 333, 391, 151, 152, 153, 154,
	0, 0, 0, 105, 68, 84, 123, 87, 94, 117,
	155, 109, 121, 71, 142, 124, 329, 332, 327, 328,
	366, 367, 400, 401, 402, 382, 324, 0, 330, 331,
	0, 386, 369, 60, 0, 91, 0, 116, 78, 144,
	395, 385, 0, 357, 397, 335, 349, 405, 350, 351,
	378, 321, 365, 108, 347, 0, 338, 316, 344, 317,
	336, 359, 76, 362, 334, 387, 368, 90, 403, 92,
	373, 0, 125, 101, 0, 0, 361, 389, 363, 383,
	356, 379, 326, 372, 398, 348, 376, 399, 0, 0,
	0, 175, 0, 815, 128, 816, 0, 0, 0, 0,
	0, 69, 0, 375, 394, 346, 377, 315, 374, 0,
	319, 322, 404, 392, 341, 342, 0, 0, 0, 0,
	0, 0, 0, 360, 364, 380, 354, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 371, 0, 0,
	0, 323, 320, 0, 358, 0, 0, 0, 325, 0,
	340, 381, 0, 314, 384, 390, 355, 148, 393, 353,
	352, 396, 114, 0, 0, 129, 81, 80, 89, 388,
	337, 345, 72, 343, 120, 110, 141, 370, 111, 119,
	93, 133, 115, 140, 149, 150, 131, 147, 61, 130,
	139, 70, 122, 63, 137, 127, 99, 85, 86, 62,
	0, 118, 75, 79, 74, 107, 134, 135, 73, 156,
	66, 146, 65, 67, 145, 106, 132, 138, 100, 97,
	64, 136, 98, 96, 88, 77, 82, 112, 95, 113,
	83, 103, 102, 104, 0, 318, 0, 126, 143, 157,
	333, 391, 151, 152, 153, 154, 0, 0, 0, 105,
	68, 84, 123, 87, 94, 117, 155, 109, 121, 71,
	142, 124, 329, 332, 327, 328, 366, 367, 400, 401,
	402, 382, 324, 0, 330, 331, 0, 386, 369, 60,
	0, 91, 0, 116, 78, 144, 395, 385, 0, 357,
	397, 335, 349, 405, 350, 351, 378, 321, 365, 108,
	347, 0, 338, 316, 344, 317, 336, 359, 76, 362,
	334, 387, 368, 90, 403, 92, 373, 0, 125, 101,
	0, 0, 361, 389, 363, 383, 356, 379, 326, 372,
	398, 348, 376, 399, 52, 0, 0, 175, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 69, 0, 375,
	394, 346, 377, 315, 374, 0, 319, 322, 404, 392,
	341, 342, 0, 0, 0, 0, 0, 0, 0, 360,
	364, 380, 354, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 371, 0, 0, 0, 323, 320, 0,
	358, 0, 0, 0, 325, 0, 340, 381, 0, 314,
	384, 390, 355, 148, 393, 353, 352, 396, 114, 0,
	0, 129, 81, 80, 89, 388, 337, 345, 72, 343,
	120, 110, 141, 370, 111, 119, 93, 133, 115, 140,
	149, 150, 131, 147, 61, 130, 139, 70, 122, 63,
	137, 127, 99, 85, 86, 62, 0, 118, 75, 79,
	74, 107, 134, 135, 73, 156, 66, 146, 65, 67,
	145, 106, 132, 138, 100, 97, 64, 136, 98, 96,
	88, 77, 82, 112, 95, 113, 83, 103, 102, 104,
	0, 318, 0, 126, 143, 157, 333, 391, 151, 152,
	153, 154, 0, 0, 0, 105, 68, 84, 123, 87,
	94, 117, 155, 109, 121, 71, 142, 124, 329, 332,
	327, 328, 366, 367, 400, 401, 402, 382, 324, 0,
	330, 331, 0, 386, 369, 60, 0, 91, 0, 116,
	78, 144, 395, 385, 0, 357, 397, 335, 349, 405,
	350, 351, 378, 321, 365, 108, 347, 0, 338, 316,
	344, 317, 336, 359, 76, 362, 334, 387, 368, 90,
	403, 92, 373, 0, 125, 101, 0, 0, 361, 389,
	363, 383, 356, 379, 326, 372, 398, 348, 376, 399,
	0, 0, 0, 175, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 69, 0, 375, 394, 346, 377, 315,
	374, 0, 319, 322, 404, 392, 341, 342, 0, 0,
	0, 0, 0, 0, 0, 360, 364, 380, 354, 0,
	0, 0, 0, 0, 0, 1053, 0, 339, 0, 371,
	0, 0, 0, 323, 320, 0, 358, 0, 0, 0,
	325, 0, 340, 381, 0, 314, 384, 390, 355, 148,
	393, 353, 352, 396, 114, 0, 0, 129, 81, 80,
	89, 388, 337, 345, 72, 343, 120, 110, 141, 370,
	111, 119, 93, 133, 115, 140, 149, 150, 131, 147,
	61, 130, 139, 70, 122, 63, 137, 127, 99, 85,
	86, 62, 0, 118, 75, 79, 74, 107, 134, 135,
	73, 156, 66, 146, 65, 67, 145, 106, 132, 138,
	100, 97, 64, 136, 98, 96, 88, 77, 82, 112,
	95, 113, 83, 103, 102, 104, 0, 318, 0, 126,
	143, 157, 333, 391, 151, 152, 153, 154, 0, 0,
	0, 105, 68, 84, 123, 87, 94, 117, 155, 109,
	121, 71, 142, 124, 329, 332, 327, 328, 366, 367,
	400, 401, 402, 382, 324, 0, 330, 331, 0, 386,
	369, 60, 0, 91, 0, 116, 78, 144, 395, 385,
	0, 357, 397, 335, 349, 405, 350, 351, 378, 321,
	365, 108, 347, 0, 338, 316, 344, 317, 336, 359,
	76, 362, 334, 387, 368, 90, 403, 92, 373, 0,
	125, 101, 0, 0, 361, 389, 363, 383, 356, 379,
	326, 372, 398, 348, 376, 399, 0, 0, 0, 234,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 69,
	0, 375, 394, 346, 377, 315, 374, 0, 319, 322,
	404, 392, 341, 342, 0, 0, 0, 0, 0, 0,
	0, 360, 364, 380, 354, 0, 0, 0, 0, 0,
	0, 705, 0, 339, 0, 371, 0, 0, 0, 323,
	320, 0, 358, 0, 0, 0, 325, 0, 340, 381,
	0, 314, 384, 390, 355, 148, 393, 353, 352, 396,
	114, 0, 0, 129, 81, 80, 89, 388, 337, 345,
	72, 343, 120, 110, 141, 370, 111, 119, 93, 133,
	115, 140, 149, 150, 131, 147, 61, 130, 139, 70,
	122, 63, 137, 127, 99, 85, 86, 62, 0, 118,
	75, 79, 74, 107, 134, 135, 73, 156, 66, 146,
	65, 67, 145, 106, 132, 138, 100, 97, 64, 136,
	98, 96, 88, 77, 82, 112, 95, 113, 83, 103,
	102, 104, 0, 318, 0, 126, 143, 157, 333, 391,
	151, 152, 153, 154, 0, 0, 0, 105, 68, 84,
	123, 87, 94, 117, 155, 109, 121, 71, 142, 124,
	329, 332, 327, 328, 366, 367, 400, 401, 402, 382,
	324, 0, 330, 331, 0, 386, 369, 60, 0, 91,
	0, 116, 78, 144, 395, 385, 0, 357, 397, 335,
	349, 405, 350, 351, 378, 321, 365, 108, 347, 0,
	338, 316, 344, 317, 336, 359, 76, 362, 334, 387,
	368, 90, 403, 92, 373, 0, 125, 101, 0, 0,
	361, 389, 363, 383, 356, 379, 326, 372, 398, 348,
	376, 399, 0, 0, 0, 175, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 69, 0, 375, 394, 346,
	377, 315, 374, 0, 319, 322, 404, 392, 341, 342,
	0, 0, 0, 0, 0, 0, 0, 360, 364, 380,
	354, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 371, 0, 0, 0, 323, 320, 0, 358, 0,
	0, 0, 325, 0, 340, 381, 0, 314, 384, 390,
	355, 148, 393, 353, 352, 396, 114, 0, 0, 129,
	81, 80, 89, 388, 337, 345, 72, 343, 120, 110,
	141, 370, 111, 119, 93, 133, 115, 140, 149, 150,
	131, 147, 61, 130, 139, 70, 122, 63, 137, 127,
	99, 85, 86, 62, 0, 118, 75, 79, 74, 107,
	134, 135, 73, 156, 66, 146, 65, 67, 145, 106,
	132, 138, 100, 97, 64, 136, 98, 96, 88, 77,
	82, 112, 95, 113, 83, 103, 102, 104, 0, 318,
	0, 126, 143, 157, 333, 391, 151, 152, 153, 154,
	0, 0, 0, 105, 68, 84, 123, 87, 94, 117,
	155, 109, 121, 71, 142, 124, 329, 332, 327, 328,
	366, 367, 400, 401, 402, 382, 324, 0, 330, 331,
	0, 386, 369, 60, 0, 91, 0, 116, 78, 144,
	395, 385, 0, 357, 397, 335, 349, 405, 350, 351,
	378, 321, 365, 108, 347, 0, 338, 316, 344, 317,
	336, 359, 76, 362, 334, 387, 368, 90, 403, 92,
	373, 0, 125, 101, 0, 0, 361, 389, 363, 383,
	356, 379, 326, 372, 398, 348, 376, 399, 0, 0,
	0, 234, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 69, 0, 375, 394, 346, 377, 315, 374, 0,
	319, 322, 404, 392, 341, 342, 0, 0, 0, 0,
	0, 0, 0, 360, 364, 380, 354, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 371, 0, 0,
	0, 323, 320, 0, 358, 0, 0, 0, 325, 0,
	340, 381, 0, 314, 384, 390, 355, 148, 393, 353,
	352, 396, 114, 0, 0, 129, 81, 80, 89, 388,
	337, 345, 72, 343, 120, 110, 141, 370, 111, 119,
	93, 133, 115, 140, 149, 150, 131, 147, 61, 130,
	139, 70, 122, 63, 137, 127, 99, 85, 86, 62,
	0, 118, 75, 79, 74, 107, 134, 135, 73, 156,
	66, 146, 65, 67, 145, 106, 132, 138, 100, 97,
	64, 136, 98, 96, 88, 77, 82, 112, 95, 113,
	83, 103, 102, 104, 0, 318, 0, 126, 143, 157,
	333, 391, 151, 152, 153, 154, 0, 0, 0, 105,
	68, 84, 123, 87, 94, 117, 155, 109, 121, 71,
	142, 124, 329, 332, 327, 328, 366, 367, 400, 401,
	402, 382, 324, 0, 330, 331, 0, 386, 369, 60,
	0, 91, 0, 116, 78, 144, 395, 385, 0, 357,
	397, 335, 349, 405, 350, 351, 378, 321, 365, 108,
	347, 0, 338, 316, 344, 317, 336, 359, 76, 362,
	334, 387, 368, 90, 403, 92, 373, 0, 125, 101,
	0, 0, 361, 389, 363, 383, 356, 379, 326, 372,
	398, 348, 376, 399, 0, 0, 0, 175, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 69, 0, 375,
	394, 346, 377, 315, 374, 0, 319, 322, 404, 392,
	341, 342, 0, 0, 0, 0, 0, 0, 0, 360,
	364, 380, 354, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 371, 0, 0, 0, 323, 320, 0,
	358, 0, 0, 0, 325, 0, 340, 381, 0, 314,
	384, 390, 355, 148, 393, 353, 352, 396, 114, 0,
	0, 129, 81, 80, 89, 388, 337, 345, 72, 343,
	120, 110, 141, 370, 111, 119, 93, 133, 115, 140,
	149, 150, 131, 147, 61, 130, 139, 70, 122, 63,
	137, 127, 99, 85, 86, 62, 0, 118, 75, 79,
	74, 107, 134, 135, 73, 156, 66, 146, 65, 312,
	145, 106, 132, 138, 100, 97, 64, 136, 98, 96,
	88, 77, 82, 112, 95, 113, 83, 103, 102, 104,
	0, 318, 0, 126, 143, 157, 333, 391, 151, 152,
	153, 154, 0, 0, 0, 313, 311, 84, 123, 87,
	94, 117, 155, 109, 121, 71, 142, 124, 329, 332,
	327, 328, 366, 367, 400, 401, 402, 382, 324, 0,
	330, 331, 0, 386, 369, 60, 0, 91, 0, 116,
	78, 144, 395, 385, 0, 357, 397, 335, 349, 405,
	350, 351, 378, 321, 365, 108, 347, 0, 338, 316,
	344, 317, 336, 359, 76, 362, 334, 387, 368, 90,
	403, 92, 373, 0, 125, 101, 0, 0, 361, 389,
	363, 383, 356, 379, 326, 372, 398, 348, 376, 399,
	0, 0, 0, 58, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 69, 0, 375, 394, 346, 377, 315,
	374, 0, 319, 322, 404, 392, 341, 342, 0, 0,
	0, 0, 0, 0, 0, 360, 364, 380, 354, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 371,
	0, 0, 0, 323, 320, 0, 358, 0, 0, 0,
	325, 0, 340, 381, 0, 314, 384, 390, 355, 148,
	393, 353, 352, 396, 114, 0, 0, 129, 81, 80,
	89, 388, 337, 345, 72, 343, 120, 110, 141, 370,
	111, 119, 93, 133, 115, 140, 149, 150, 131, 147,
	61, 130, 139, 70, 122, 63, 137, 127, 99, 85,
	86, 62, 0, 118, 75, 79, 74, 107, 134, 135,
	73, 156, 66, 146, 65, 67, 145, 106, 132, 138,
	100, 97, 64, 136, 98, 96, 88, 77, 82, 112,
	95, 113, 83, 103, 102, 104, 0, 318, 0, 126,
	143, 157, 333, 391, 151, 152, 153, 154, 0, 0,
	0, 105, 68, 84, 123, 87, 94, 117, 155, 109,
	121, 71, 142, 124, 329, 332, 327, 328, 366, 367,
	400, 401, 402, 382, 324, 0, 330, 331, 0, 386,
	369, 60, 0, 91, 0, 116, 78, 144, 395, 385,
	0, 357, 397, 335, 349, 405, 350, 351, 378, 321,
	365, 108, 347, 0, 338, 316, 344, 317, 336, 359,
	76, 362, 334, 387, 368, 90, 403, 92, 373, 0,
	125, 101, 0, 0, 361, 389, 363, 383, 356, 379,
	326, 372, 398, 348, 376, 399, 0, 0, 0, 175,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 69,
	0, 375, 394, 346, 377, 315, 374, 0, 319, 322,
	404, 392, 341, 342, 0, 0, 0, 0, 0, 0,
	0, 360, 364, 380, 354, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 371, 0, 0, 0, 323,
	320, 0, 358, 0, 0, 0, 325, 0, 340, 381,
	0, 314, 384, 390, 355, 148, 393, 353, 352, 396,
	114, 0, 0, 129, 81, 80, 89, 388, 337, 345,
	72, 343, 120, 110, 141, 370, 111, 119, 93, 133,
	115, 140, 149, 150, 131, 147, 61, 130, 584, 70,
	122, 63, 137, 127, 99, 85, 86, 62, 0, 118,
	75, 79, 74, 107, 134, 135, 73, 156, 66, 146,
	65, 312, 145, 106, 132, 138, 100, 97, 64, 136,
	98, 96, 88, 77, 82, 112, 95, 113, 83, 103,
	102, 104, 0, 318, 0, 126, 143, 157, 333, 391,
	151, 152, 153, 154, 0, 0, 0, 313, 311, 84,
	123, 87, 94, 117, 155, 109, 121, 71, 142, 124,
	329, 332, 327, 328, 366, 367, 400, 401, 402, 382,
	324, 0, 330, 331, 0, 386, 369, 60, 0, 91,
	0, 116, 78, 144, 395, 385, 0, 357, 397, 335,
	349, 405, 350, 351, 378, 321, 365, 108, 347, 0,
	338, 316, 344, 317, 336, 359, 76, 362, 334, 387,
	368, 90, 403, 92, 373, 0, 125, 101, 0, 0,
	361, 389, 363, 383, 356, 379, 326, 372, 398, 348,
	376, 399, 0, 0, 0, 175, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 69, 0, 375, 394, 346,
	377, 315, 374, 0, 319, 322, 404, 392, 341, 342,
	0, 0, 0, 0, 0, 0, 0, 360, 364, 380,
	354, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 371, 0, 0, 0, 323, 320, 0, 358, 0,
	0, 0, 325, 0, 340, 381, 0, 314, 384, 390,
	355, 148, 393, 353, 352, 396, 114, 0, 0, 129,
	81, 80, 89, 388, 337, 345, 72, 343, 120, 110,
	141, 370, 111, 119, 93, 133, 115, 140, 149, 150,
	131, 147, 61, 130, 303, 70, 122, 63, 137, 127,
	99, 85, 86, 62, 0, 118, 75, 79, 74, 107,
	134, 135, 73, 156, 66, 146, 65, 312, 145, 106,
	132, 138, 100, 97, 64, 136, 98, 96, 88, 77,
	82, 112, 95, 113, 83, 103, 102, 104, 0, 318,
	0, 126, 143, 157, 333, 391, 151, 152, 153, 154,
	0, 0, 0, 313, 311, 306, 305, 87, 94, 117,
	155, 109, 121, 71, 142, 124, 329, 332, 327, 328,
	366, 367, 400, 401, 402, 382, 324, 0, 330, 331,
	48, 386, 369, 60, 0, 91, 0, 116, 78, 144,
	0, 0, 108, 0, 0, 0, 0, 236, 0, 0,
	0, 76, 0, 233, 0, 0, 90, 275, 92, 0,
	0, 125, 101, 0, 0, 0, 0, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 0, 0,
	234, 254, 253, 128, 256, 257, 258, 259, 0, 0,
	69, 255, 260, 261, 262, 0, 0, 231, 247, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	244, 245, 0, 0, 0, 0, 286, 0, 246, 0,
	0, 242, 243, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 148, 0, 0, 284,
	0, 114, 0, 0, 129, 81, 80, 89, 0, 0,
	0, 72, 0, 120, 110, 141, 0, 111, 119, 93,
	133, 115, 140, 149, 150, 131, 147, 61, 130, 139,
	70, 122, 63, 137, 127, 99, 85, 86, 62, 0,
	118, 75, 79, 74, 107, 134, 135, 73, 156, 66,
	146, 65, 67, 145, 106, 132, 138, 100, 97, 64,
	136, 98, 96, 88, 77, 82, 112, 95, 113, 83,
	103, 102, 104, 0, 0, 0, 126, 143, 157, 0,
	0, 151, 152, 153, 154, 0, 0, 0, 105, 68,
	84, 123, 87, 94, 117, 155, 109, 121, 71, 142,
	124, 276, 285, 282, 283, 280, 281, 279, 278, 277,
	287, 268, 269, 270, 271, 273, 0, 272, 60, 0,
	91, 21, 116, 78, 144, 108, 0, 0, 742, 0,
	236, 0, 0, 0, 76, 0, 233, 0, 0, 90,
	275, 92, 0, 0, 125, 101, 0, 0, 0, 0,
	266, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 234, 254, 253, 128, 256, 257, 258,
	259, 0, 0, 69, 255, 260, 261, 262, 0, 0,
	231, 247, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 245, 227, 0, 0, 0, 286,
	0, 246, 0, 0, 242, 243, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	0, 0, 284, 0, 114, 0, 0, 129, 81, 80,
	89, 0, 0, 0, 72, 0, 120, 110, 141, 0,
	111, 119, 93, 133, 115, 140, 149, 150, 131, 147,
	61, 130, 139, 70, 122, 63, 137, 127, 99, 85,
	86, 62, 0, 118, 75, 79, 74, 107, 134, 135,
	73, 156, 66, 146, 65, 67, 145, 106, 132, 138,
	100, 97, 64, 136, 98, 96, 88, 77, 82, 112,
	95, 113, 83, 103, 102, 104, 0, 0, 0, 126,
	143, 157, 0, 0, 151, 152, 153, 154, 0, 0,
	0, 105, 68, 84, 123, 87, 94, 117, 155, 109,
	121, 71, 142, 124, 276, 285, 282, 283, 280, 281,
	279, 278, 277, 287, 268, 269, 270, 271, 273, 108,
	272, 60, 0, 91, 236, 116, 78, 144, 76, 0,
	233, 0, 0, 90, 275, 92, 0, 0, 125, 101,
	0, 0, 0, 0, 266, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 52, 0, 463, 234, 254, 253,
	128, 256, 257, 258, 259, 0, 0, 69, 255, 260,
	261, 262, 0, 0, 231, 247, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 244, 245, 0,
	0, 0, 0, 286, 0, 246, 0, 0, 242, 243,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 0, 0, 284, 0, 114, 0,
	0, 129, 81, 80, 89, 0, 0, 0, 72, 0,
	120, 110, 141, 0, 111, 119, 93, 133, 115, 140,
	149, 150, 131, 147, 61, 130, 139, 70, 122, 63,
	137, 127, 99, 85, 86, 62, 0, 118, 75, 79,
	74, 107, 134, 135, 73, 156, 66, 146, 65, 67,
	145, 106, 132, 138, 100, 97, 64, 136, 98, 96,
	88, 77, 82, 112, 95, 113, 83, 103, 102, 104,
	0, 0, 0, 126, 143, 157, 0, 0, 151, 152,
	153, 154, 0, 0, 0, 105, 68, 84, 123, 87,
	94, 117, 155, 109, 121, 71, 142, 124, 276, 285,
	282, 283, 280, 281, 279, 278, 277, 287, 268, 269,
	270, 271, 273, 108, 272, 60, 0, 91, 236, 116,
	78, 144, 76, 0, 233, 0, 0, 90, 275, 92,
	0, 0, 125, 101, 0, 0, 0, 0, 266, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 0,
	0, 234, 254, 253, 128, 256, 257, 258, 259, 0,
	0, 69, 255, 260, 261, 262, 0, 0, 231, 247,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 244, 245, 227, 0, 0, 0, 286, 0, 246,
	0, 0, 242, 243, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	284, 0, 114, 0, 0, 129, 81, 80, 89, 0,
	0, 0, 72, 0, 120, 110, 141, 0, 111, 119,
	93, 133, 115, 140, 149, 150, 131, 147, 61, 130,
	139, 70, 122, 63, 137, 127, 99, 85, 86, 62,
	0, 118, 75, 79, 74, 107, 134, 135, 73, 156,
	66, 146, 65, 67, 145, 106, 132, 138, 100, 97,
	64, 136, 98, 96, 88, 77, 82, 112, 95, 113,
	83, 103, 102, 104, 0, 0, 0, 126, 143, 157,
	0, 0, 151, 152, 153, 154, 0, 0, 0, 105,
	68, 84, 123, 87, 94, 117, 155, 109, 121, 71,
	142, 124, 276, 285, 282, 283, 280, 281, 279, 278,
	277, 287, 268, 269, 270, 271, 273, 108, 272, 60,
	0, 91, 236, 116, 78, 144, 76, 0, 233, 0,
	0, 90, 275, 92, 0, 0, 125, 101, 0, 0,
	0, 0, 266, 267, 0, 0, 0, 0, 0, 0,
	807, 0, 52, 0, 0, 234, 254, 253, 128, 256,
	257, 258, 259, 0, 0, 69, 255, 260, 261, 262,
	0, 0, 231, 247, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 244, 245, 0, 0, 0,
	0, 286, 0, 246, 0, 0, 242, 243, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 148, 0, 0, 284, 0, 114, 0, 0, 129,
	81, 80, 89, 0, 0, 0, 72, 0, 120, 110,
	141, 0, 111, 119, 93, 133, 115, 140, 149, 150,
	131, 147, 61, 130, 139, 70, 122, 63, 137, 127,
	99, 85, 86, 62, 0, 118, 75, 79, 74, 107,
	134, 135, 73, 156, 66, 146, 65, 67, 145, 106,
	132, 138, 100, 97, 64, 136, 98, 96, 88, 77,
	82, 112, 95, 113, 83, 103, 102, 104, 0, 0,
	0, 126, 143, 157, 0, 0, 151, 152, 153, 154,
	0, 0, 0, 105, 68, 84, 123, 87, 94, 117,
	155, 109, 121, 71, 142, 124, 276, 285, 282, 283,
	280, 281, 279, 278, 277, 287, 268, 269, 270, 271,
	273, 108, 272, 60, 0, 91, 236, 116, 78, 144,
	76, 0, 233, 0, 0, 90, 275, 92, 0, 0,
	125, 101, 0, 0, 0, 0, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 234,
	254, 253, 128, 256, 257, 258, 259, 0, 0, 69,
	255, 260, 261, 262, 0, 0, 231, 247, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 244,
	245, 0, 0, 0, 0, 286, 0, 246, 0, 0,
	242, 243, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 0, 0, 284, 0,
	114, 0, 0, 129, 81, 80, 89, 0, 0, 0,
	72, 0, 120, 110, 141, 0, 111, 119, 93, 133,
	115, 140, 149, 150, 131, 147, 61, 130, 139, 70,
	122, 63, 137, 127, 99, 85, 86, 62, 0, 118,
	75, 79, 74, 107, 134, 135, 73, 156, 66, 146,
	65, 67, 145, 106, 132, 138, 100, 97, 64, 136,
	98, 96, 88, 77, 82, 112, 95, 113, 83, 103,
	102, 104, 0, 0, 0, 126, 143, 157, 0, 0,
	151, 152, 153, 154, 0, 0, 0, 105, 68, 84,
	123, 87, 94, 117, 155, 109, 121, 71, 142, 124,
	276, 285, 282, 283, 280, 281, 279, 278, 277, 287,
	268, 269, 270, 271, 273, 108, 272, 60, 0, 91,
	0, 116, 78, 144, 76, 0, 0, 0, 0, 90,
	275, 92, 0, 0, 125, 101, 0, 0, 0, 0,
	266, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 234, 254, 253, 128, 256, 257, 258,
	259, 0, 0, 69, 255, 260, 261, 262, 0, 0,
	0, 247, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 245, 0, 0, 0, 0, 286,
	0, 246, 0, 0, 242, 243, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	0, 0, 284, 0, 114, 0, 0, 129, 81, 80,
	89, 0, 0, 0, 72, 0, 120, 110, 141, 1318,
	111, 119, 93, 133, 115, 140, 149, 150, 131, 147,
	61, 130, 139, 70, 122, 63, 137, 127, 99, 85,
	86, 62, 0, 118, 75, 79, 74, 107, 134, 135,
	73, 156, 66, 146, 65, 67, 145, 106, 132, 138,
	100, 97, 64, 136, 98, 96, 88, 77, 82, 112,
	95, 113, 83, 103, 102, 104, 0, 0, 0, 126,
	143, 157, 0, 0, 151, 152, 153, 154, 0, 0,
	0, 105, 68, 84, 123, 87, 94, 117, 155, 109,
	121, 71, 142, 124, 276, 285, 282, 283, 280, 281,
	279, 278, 277, 287, 268, 269, 270, 271, 273, 108,
	272, 60, 0, 91, 0, 116, 78, 144, 76, 0,
	0, 0, 0, 90, 275, 92, 0, 0, 125, 101,
	0, 0, 0, 0, 266, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 52, 0, 0, 234, 254, 253,
	128, 256, 257, 258, 259, 0, 0, 69, 255, 260,
	261, 262, 0, 0, 0, 247, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 244, 245, 0,
	0, 0, 0, 286, 0, 246, 0, 0, 242, 243,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 0, 0, 284, 0, 114, 0,
	0, 129, 81, 80, 89, 0, 0, 0, 72, 0,
	120, 110, 141, 0, 111, 119, 93, 133, 115, 140,
	149, 150, 131, 147, 61, 130, 139, 70, 122, 63,
	137, 127, 99, 85, 86, 62, 0, 118, 75, 79,
	74, 107, 134, 135, 73, 156, 66, 146, 65, 67,
	145, 106, 132, 138, 100, 97, 64, 136, 98, 96,
	88, 77, 82, 112, 95, 113, 83, 103, 102, 104,
	0, 0, 0, 126, 143, 157, 0, 0, 151, 152,
	153, 154, 0, 0, 0, 105, 68, 84, 123, 87,
	94, 117, 155, 109, 121, 71, 142, 124, 276, 285,
	282, 283, 280, 281, 279, 278, 277, 287, 268, 269,
	270, 271, 273, 108, 272, 60, 0, 91, 0, 116,
	78, 144, 76, 0, 0, 0, 0, 90, 0, 92,
	0, 0, 125, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 487, 486, 496,
	497, 489, 490, 491, 492, 493, 494, 495, 488, 0,
	0, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 114, 0, 0, 129, 81, 80, 89, 0,
	0, 0, 72, 0, 120, 110, 141, 0, 111, 119,
	93, 133, 115, 140, 149, 150, 131, 147, 61, 130,
	139, 70, 122, 63, 137, 127, 99, 85, 86, 62,
	0, 118, 75, 79, 74, 107, 134, 135, 73, 156,
	66, 146, 65, 67, 145, 106, 132, 138, 100, 97,
	64, 136, 98, 96, 88, 77, 82, 112, 95, 113,
	83, 103, 102, 104, 0, 0, 0, 126, 143, 157,
	0, 0, 151, 152, 153, 154, 0, 0, 0, 105,
	68, 84, 123, 87, 94, 117, 155, 109, 121, 71,
	142, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 474, 0, 60,
	0, 91, 76, 116, 78, 144, 0, 90, 0, 92,
	0, 0, 125, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 0, 476, 128, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 471, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 114, 0, 0, 129, 81, 80, 89, 0,
	0, 0, 72, 0, 120, 110, 141, 0, 111, 119,
	93, 133, 115, 140, 149, 150, 131, 147, 61, 130,
	139, 70, 122, 63, 137, 127, 99, 85, 86, 62,
	0, 118, 75, 79, 74, 107, 134, 135, 73, 156,
	66, 146, 65, 67, 145, 106, 132, 138, 100, 97,
	64, 136, 98, 96, 88, 77, 82, 112, 95, 113,
	83, 103, 102, 104, 0, 0, 0, 126, 143, 157,
	0, 0, 151, 152, 153, 154, 0, 0, 0, 105,
	68, 84, 123, 87, 94, 117, 155, 109, 121, 71,
	142, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 60,
	0, 91, 76, 116, 78, 144, 0, 90, 0, 92,
	0, 0, 125, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 168, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 172, 0, 167, 0, 0,
	0, 173, 114, 0, 0, 129, 81, 80, 89, 0,
	0, 0, 72, 0, 120, 110, 141, 0, 111, 119,
	93, 133, 115, 140, 169, 150, 131, 147, 61, 130,
	139, 70, 122, 63, 137, 127, 99, 85, 86, 62,
	0, 118, 75, 79, 74, 107, 134, 135, 73, 156,
	66, 146, 65, 67, 145, 106, 132, 138, 100, 97,
	64, 136, 98, 96, 88, 77, 82, 112, 95, 113,
	83, 103, 102, 104, 0, 0, 0, 126, 143, 157,
	0, 0, 151, 152, 153, 154, 0, 0, 0, 105,
	68, 84, 123, 87, 94, 117, 155, 109, 121, 71,
	142, 124, 0, 170, 0, 48, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 60,
	0, 91, 0, 116, 78, 144, 76, 0, 0, 0,
	0, 90, 0, 92, 0, 0, 125, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 52, 0, 0, 175, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 148, 0, 0, 0, 0, 114, 0, 0, 129,
	81, 80, 89, 0, 0, 0, 72, 0, 120, 110,
	141, 0, 111, 119, 93, 133, 115, 140, 149, 150,
	131, 147, 61, 130, 139, 70, 122, 63, 137, 127,
	99, 85, 86, 62, 0, 118, 75, 79, 74, 107,
	134, 135, 73, 156, 66, 146, 65, 67, 145, 106,
	132, 138, 100, 97, 64, 136, 98, 96, 88, 77,
	82, 112, 95, 113, 83, 103, 102, 104, 0, 0,
	0, 126, 143, 157, 0, 0, 151, 152, 153, 154,
	0, 0, 0, 105, 68, 84, 123, 87, 94, 117,
	155, 109, 121, 71, 142, 124, 0, 0, 0, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 60, 0, 91, 21, 116, 78, 144,
	76, 0, 0, 0, 0, 90, 0, 92, 0, 0,
	125, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 58,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 0, 0, 0, 0,
	114, 0, 0, 129, 81, 80, 89, 0, 0, 0,
	72, 0, 120, 110, 141, 0, 111, 119, 93, 133,
	115, 140, 149, 150, 131, 147, 61, 130, 139, 70,
	122, 63, 137, 127, 99, 85, 86, 62, 0, 118,
	75, 79, 74, 107, 134, 135, 73, 156, 66, 146,
	65, 67, 145, 106, 132, 138, 100, 97, 64, 136,
	98, 96, 88, 77, 82, 112, 95, 113, 83, 103,
	102, 104, 0, 0, 0, 126, 143, 157, 0, 0,
	151, 152, 153, 154, 0, 0, 0, 105, 68, 84,
	123, 87, 94, 117, 155, 109, 121, 71, 142, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 0, 91,
	21, 116, 78, 144, 108, 0, 0, 0, 573, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 90, 0,
	92, 0, 0, 125, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 575, 128, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 0,
	0, 0, 0, 114, 0, 0, 129, 81, 80, 89,
	0, 0, 0, 72, 0, 120, 110, 141, 0, 111,
	119, 93, 133, 115, 140, 149, 150, 131, 147, 61,
	130, 139, 70, 122, 63, 137, 127, 99, 85, 86,
	62, 0, 118, 75, 79, 74, 107, 134, 135, 73,
	156, 66, 146, 65, 67, 145, 106, 132, 138, 100,
	97, 64, 136, 98, 96, 88, 77, 82, 112, 95,
	113, 83, 103, 102, 104, 0, 0, 0, 126, 143,
	157, 0, 0, 151, 152, 153, 154, 0, 0, 0,
	105, 68, 84, 123, 87, 94, 117, 155, 109, 121,
	71, 142, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	60, 0, 91, 76, 116, 78, 144, 0, 90, 0,
	92, 0, 0, 125, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 0, 0, 128, 899, 0, 0, 900,
	0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 0,
	0, 0, 0, 114, 0, 0, 129, 81, 80, 89,
	0, 0, 0, 72, 0, 120, 110, 141, 0, 111,
	119, 93, 133, 115, 140, 149, 150, 131, 147, 61,
	130, 139, 70, 122, 63, 137, 127, 99, 85, 86,
	62, 0, 118, 75, 79, 74, 107, 134, 135, 73,
	156, 66, 146, 65, 67, 145, 106, 132, 138, 100,
	97, 64, 136, 98, 96, 88, 77, 82, 112, 95,
	113, 83, 103, 102, 104, 0, 0, 0, 126, 143,
	157, 0, 0, 151, 152, 153, 154, 0, 0, 0,
	105, 68, 84, 123, 87, 94, 117, 155, 109, 121,
	71, 142, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	60, 0, 91, 0, 116, 78, 144, 76, 0, 593,
	0, 0, 90, 0, 92, 0, 0, 125, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 0, 592, 128,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 0, 0, 0, 0, 114, 0, 0,
	129, 81, 80, 89, 0, 0, 0, 72, 0, 120,
	110, 141, 0, 111, 119, 93, 133, 115, 140, 149,
	150, 131, 147, 61, 130, 139, 70, 122, 63, 137,
	127, 99, 85, 86, 62, 0, 118, 75, 79, 74,
	107, 134, 135, 73, 156, 66, 146, 65, 67, 145,
	106, 132, 138, 100, 97, 64, 136, 98, 96, 88,
	77, 82, 112, 95, 113, 83, 103, 102, 104, 0,
	0, 0, 126, 143, 157, 0, 0, 151, 152, 153,
	154, 0, 0, 0, 105, 68, 84, 123, 87, 94,
	117, 155, 109, 121, 71, 142, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 573, 0, 60, 0, 91, 76, 116, 78,
	144, 0, 90, 0, 92, 0, 0, 125, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 575, 128,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 0, 0, 0, 0, 114, 0, 0,
	129, 81, 80, 89, 0, 0, 0, 72, 0, 120,
	110, 141, 0, 571, 119, 93, 133, 115, 140, 149,
	150, 131, 147, 61, 130, 139, 70, 122, 63, 137,
	127, 99, 85, 86, 62, 0, 118, 75, 79, 74,
	107, 134, 135, 73, 156, 66, 146, 65, 67, 145,
	106, 132, 138, 100, 97, 64, 136, 98, 96, 88,
	77, 82, 112, 95, 113, 83, 103, 102, 104, 0,
	0, 0, 126, 143, 157, 0, 0, 151, 152, 153,
	154, 0, 0, 0, 105, 68, 84, 123, 87, 94,
	117, 155, 109, 121, 71, 142, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 60, 0, 91, 76, 116, 78,
	144, 0, 90, 0, 92, 0, 0, 125, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 52, 0, 0, 58, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 0, 0, 0, 0, 114, 0, 0,
	129, 81, 80, 89, 0, 0, 0, 72, 0, 120,
	110, 141, 0, 111, 119, 93, 133, 115, 140, 149,
	150, 131, 147, 61, 130, 139, 70, 122, 63, 137,
	127, 99, 85, 86, 62, 0, 118, 75, 79, 74,
	107, 134, 135, 73, 156, 66, 146, 65, 67, 145,
	106, 132, 138, 100, 97, 64, 136, 98, 96, 88,
	77, 82, 112, 95, 113, 83, 103, 102, 104, 0,
	0, 0, 126, 143, 157, 0, 0, 151, 152, 153,
	154, 0, 0, 0, 105, 68, 84, 123, 87, 94,
	117, 155, 109, 121, 71, 142, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 60, 0, 91, 76, 116, 78,
	144, 0, 90, 0, 92, 0, 0, 125, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 575, 128,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 0, 0, 0, 0, 114, 0, 0,
	129, 81, 80, 89, 0, 0, 0, 72, 0, 120,
	110, 141, 0, 111, 119, 93, 133, 115, 140, 149,
	150, 131, 147, 61, 130, 139, 70, 122, 63, 137,
	127, 99, 85, 86, 62, 0, 118, 75, 79, 74,
	107, 134, 135, 73, 156, 66, 146, 65, 67, 145,
	106, 132, 138, 100, 97, 64, 136, 98, 96, 88,
	77, 82, 112, 95, 113, 83, 103, 102, 104, 0,
	0, 0, 126, 143, 157, 0, 0, 151, 152, 153,
	154, 0, 0, 0, 105, 68, 84, 123, 87, 94,
	117, 155, 109, 121, 71, 142, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 60, 0, 91, 76, 116, 78,
	144, 0, 90, 0, 92, 0, 0, 125, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 0, 476, 128,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 0, 0, 0, 0, 114, 0, 0,
	129, 81, 80, 89, 0, 0, 0, 72, 0, 120,
	110, 141, 0, 111, 119, 93, 133, 115, 140, 149,
	150, 131, 147, 61, 130, 139, 70, 122, 63, 137,
	127, 99, 85, 86, 62, 0, 118, 75, 79, 74,
	107, 134, 135, 73, 156, 66, 146, 65, 67, 145,
	106, 132, 138, 100, 97, 64, 136, 98, 96, 88,
	77, 82, 112, 95, 113, 83, 103, 102, 104, 0,
	0, 0, 126, 143, 157, 0, 0, 151, 152, 153,
	154, 0, 0, 0, 105, 68, 84, 123, 87, 94,
	117, 155, 109, 121, 71, 142, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 60, 0, 91, 0, 116, 78,
	144, 550, 76, 0, 0, 0, 0, 90, 0, 92,
	0, 0, 125, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 114, 0, 0, 129, 81, 80, 89, 0,
	0, 0, 72, 0, 120, 110, 141, 0, 111, 119,
	93, 133, 115, 140, 149, 150, 131, 147, 61, 130,
	139, 70, 122, 63, 137, 127, 99, 85, 86, 62,
	0, 118, 75, 79, 74, 107, 134, 135, 73, 156,
	66, 146, 65, 67, 145, 106, 132, 138, 100, 97,
	64, 136, 98, 96, 88, 77, 82, 112, 95, 113,
	83, 103, 102, 104, 0, 0, 0, 126, 143, 157,
	0, 0, 151, 152, 153, 154, 0, 0, 0, 105,
	68, 84, 123, 87, 94, 117, 155, 109, 121, 71,
	142, 124, 0, 0, 0, 0, 298, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 60,
	0, 91, 76, 116, 78, 144, 0, 90, 0, 92,
	0, 0, 125, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 114, 0, 0, 129, 81, 80, 89, 0,
	0, 0, 72, 0, 120, 110, 141, 0, 111, 119,
	93, 133, 115, 140, 149, 150, 131, 147, 61, 130,
	139, 70, 122, 63, 137, 127, 99, 85, 86, 62,
	0, 118, 75, 79, 74, 107, 134, 135, 73, 156,
	66, 146, 65, 67, 145, 106, 132, 138, 100, 97,
	64, 136, 98, 96, 88, 77, 82, 112, 95, 113,
	83, 103, 102, 104, 0, 0, 0, 126, 143, 157,
	0, 0, 151, 152, 153, 154, 0, 0, 0, 105,
	68, 84, 123, 87, 94, 117, 155, 109, 121, 71,
	142, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 60,
	0, 91, 76, 116, 78, 144, 0, 90, 0, 92,
	0, 0, 125, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 0, 148, 0, 0,
	0, 0, 114, 0, 0, 129, 81, 80, 89, 0,
	0, 0, 72, 0, 120, 110, 141, 0, 111, 119,
	93, 133, 115, 140, 149, 150, 131, 147, 61, 130,
	139, 70, 122, 63, 137, 127, 99, 85, 86, 62,
	0, 118, 75, 79, 74, 107, 134, 135, 73, 156,
	66, 146, 65, 67, 145, 106, 132, 138, 100, 97,
	64, 136, 98, 96, 88, 77, 82, 112, 95, 113,
	83, 103, 102, 104, 0, 0, 0, 126, 143, 157,
	0, 0, 151, 152, 153, 154, 0, 0, 0, 105,
	68, 84, 123, 87, 94, 117, 155, 109, 121, 71,
	142, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 60,
	0, 91, 76, 116, 78, 144, 0, 90, 0, 92,
	0, 0, 125, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 114, 0, 0, 129, 81, 80, 89, 0,
	0, 0, 72, 0, 120, 110, 141, 0, 111, 119,
	93, 133, 115, 140, 149, 150, 131, 147, 61, 130,
	139, 70, 122, 63, 137, 127, 99, 85, 86, 62,
	0, 118, 75, 79, 74, 107, 134, 135, 73, 156,
	66, 146, 65, 67, 145, 106, 132, 138, 100, 97,
	64, 136, 98, 96, 88, 77, 82, 112, 95, 113,
	83, 103, 102, 104, 0, 0, 0, 126, 143, 157,
	0, 0, 151, 152, 153, 154, 0, 0, 0, 105,
	68, 84, 123, 87, 94, 117, 155, 109, 121, 71,
	142, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 60,
	0, 91, 76, 116, 78, 144, 0, 90, 0, 92,
	0, 0, 125, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 234, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 114, 0, 0, 129, 81, 80, 89, 0,
	0, 0, 72, 0, 120, 110, 141, 0, 111, 119,
	93, 133, 115, 140, 149, 150, 131, 147, 61, 130,
	139, 70, 122, 63, 137, 127, 99, 85, 86, 62,
	0, 118, 75, 79, 74, 107, 134, 135, 73, 156,
	66, 146, 65, 67, 145, 106, 132, 138, 100, 97,
	64, 136, 98, 96, 88, 77, 82, 112, 95, 113,
	83, 103, 102, 104, 0, 0, 0, 126, 143, 157,
	0, 0, 151, 152, 153, 154, 0, 0, 0, 105,
	68, 84, 123, 87, 94, 117, 155, 109, 121, 71,
	142, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 60,
	0, 91, 76, 116, 78, 144, 0, 90, 0, 92,
	0, 0, 125, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 114, 0, 0, 129, 81, 80, 89, 0,
	0, 0, 72, 0, 120, 110, 141, 0, 111, 119,
	93, 133, 115, 140, 149, 150, 131, 147, 61, 130,
	139, 70, 122, 63, 137, 127, 99, 85, 86, 62,
	0, 118, 75, 79, 74, 107, 134, 135, 73, 156,
	66, 146, 65, 67, 145, 106, 132, 138, 100, 97,
	64, 136, 98, 96, 88, 77, 82, 112, 95, 113,
	83, 103, 102, 104, 0, 0, 0, 126, 143, 157,
	0, 0, 151, 152, 153, 154, 0, 0, 0, 105,
	68, 84, 123, 87, 94, 117, 155, 109, 121, 71,
	142, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 91, 0, 116, 78, 144,
}

var yyPact = [...]int16{
	1983, -1000, -184, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10815, -1000, -1000, -1000, -1000, -1000, -1000, 675, 7485,
	81, 106, -16, 10155, 103, 624, 10815, -1000, 2, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 838, 867, -1000, -1000,
	-1000, 69, -1000, -1000, -1000, 605, -1000, 629, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5925, -1000,
	68, 9050, 9935, 5009, -1000, 515, 101, 10815, -152, 10375,
	66, 66, 66, -1000, -1000, -1000, -1000, 98, 10815, -1000,
	10815, 62, 513, 62, 62, 62, 10815, -1000, 140, 10815,
	512, 777, 63, 3041, 3041, 3041, 3041, 8, 3041, -86,
	703, -1000, -1000, -1000, -1000, 3041, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 825, 833, 680, 824,
	727, 360, -1000, 10815, 816, 10375, 857, -1000, 7265, 137,
	-1000, 6373, 2265, 629, -1000, -1000, 629, -1000, -1000, 116,
	-1000, -1000, 6821, 6821, 6821, 6821, 6821, 6821, 6821, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 629, -1000, 5244, 629, 629, 629, 629,
	629, 629, 629, 629, 6373, 629, 629, 629, 629, 629,
	629, 629, 629, 629, 629, 629, 629, 629, 280, 9715,
	631, 122, -1000, -1000, -1000, 815, 7933, 8830, 10815, 597,
	-1000, 627, 4763, -104, -1000, -1000, -1000, 181, 8610, -1000,
	-1000, -1000, 775, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 511, -1000, 2065, 507,
	3041, 87, 635, 497, 240, 490, 10815, 10815, 3041, 85,
	10815, 813, 702, 10815, 484, 482, -1000, 4517, -1000, 3041,
	3041, 3041, 3041, 3041, 3041, 3041, 3041, -1000, -1000, -1000,
	-1000, -1000, -1000, 3041, 3041, -1000, -85, -1000, 10815, -1000,
	782, 6373, 6373, 838, -1000, 69, -1000, -1000, -1000, 776,
	-1000, -1000, -1000, -1000, -1000, 629, 437, 136, 10815, -1000,
	6373, 6373, 410, -1000, 9490, -1000, -1000, 3533, 167, 133,
	6821, 331, 250, 6821, 6821, 6821, 6821, 6821, 6821, 6821,
	6821, 6821, 6821, 6821, 6821, 6821, 6821, 6821, 340, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 455, -1000, 69,
	611, 611, 145, 145, 145, 145, 145, 145, 7045, 5477,
	360, 506, 256, 5244, 5925, 5925, 6373, 6373, 10595, 10595,
	5925, 818, 218, 256, 10595, -1000, 360, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 5925, 5925, 5925, 5925, -1000, 37,
	10815, -1000, 10595, 9050, 9050, 9050, 9050, 9050, -1000, 732,
	731, -1000, 716, 715, 714, 86, 10815, -1000, 496, 7933,
	166, 629, -1000, 9270, -1000, -1000, 37, 562, 9050, 10815,
	-1000, -1000, 4271, 627, -104, 608, -1000, -109, -97, 6149,
	125, -1000, -1000, -1000, -1000, 2795, 321, 291, -71, -1000,
	-1000, -1000, 638, -1000, 638, 638, 638, 638, -29, -29,
	-29, -29, -1000, -1000, -1000, -1000, -1000, 674, 672, -1000,
	638, 638, 638, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 640,
	640, 640, 649, 649, 668, -1000, 10815, -167, 451, 3041,
	804, 3041, -1000, 57, -1000, 10815, -1000, -1000, 10815, 3041,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 247, -1000, -1000, -1000, -1000,
	862, 141, 476, 616, -1000, 389, 825, 360, 727, 8386,
	717, -1000, -1000, -1000, 10375, 10375, -1000, 167, 275, -1000,
	-1000, 357, -1000, -1000, -1000, -1000, 126, 629, -1000, 4025,
	1803, -1000, -1000, -1000, -1000, 331, 6821, 6821, 6821, 690,
	1803, 1732, 922, 403, 145, 272, 272, 150, 150, 150,
	150, 150, 598, 598, -1000, -1000, -1000, 360, -1000, -1000,
	-1000, 360, 5925, 613, -1000, -1000, 6373, -1000, 360, 488,
	488, 369, 336, 655, -1000, 123, 634, 488, 5925, 277,
	-1000, 6373, 360, -1000, 488, 360, 488, 488, 67, 629,
	-1000, 603, -1000, 180, 122, 667, 699, 197, -1000, -1000,
	-1000, -1000, 724, -1000, 722, -1000, 700, -1000, -1000, -1000,
	-1000, -1000, 100, 99, 93, 10375, -1000, 853, 9050, 594,
	-1000, -1000, 608, -104, -111, -1000, -1000, -1000, 256, -1000,
	396, 587, 2549, -1000, -1000, -1000, -1000, -1000, -1000, 664,
	794, 189, 196, 387, -1000, -1000, 781, -1000, 253, -73,
	-1000, -1000, 316, -29, -29, -1000, -1000, 125, 774, 125,
	125, 125, 359, 359, -1000, -1000, -1000, -1000, 307, -1000,
	-1000, -1000, 306, -1000, 692, 10375, 3041, -1000, 3779, -1000,
	-1000, -1000, -1000, -1000, -1000, 341, 273, 185, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 33,
	-1000, 3041, -1000, 292, 10815, 10815, -1000, 740, 6373, 6373,
	6373, -1000, -1000, -1000, 782, -1000, 818, 837, -1000, 765,
	762, 5925, -1000, 120, -1000, -1000, -1000, -1000, 3287, 5925,
	119, -1000, 690, 1803, 1238, -1000, 6821, 6821, -1000, -1000,
	488, 5925, 256, -1000, -1000, -1000, 1471, 340, 1471, 6821,
	6821, 4025, 6821, 6821, -162, 592, 183, -1000, 6373, 221,
	-1000, -1000, -1000, -1000, -1000, 687, 10595, 629, -1000, 7709,
	10375, 838, 10595, 6373, 6373, -1000, -1000, 6373, 662, -1000,
	6373, -1000, -1000, -1000, -1000, 629, 629, 629, 433, -1000,
	838, 594, -1000, -1000, -1000, -113, -123, -1000, -1000, 2795,
	-1000, 2795, 10375, -1000, 364, 362, -1000, -1000, 683, 121,
	-1000, -1000, -1000, 489, 125, 125, -1000, 198, -1000, -1000,
	-1000, 479, -1000, 477, 576, 473, 10815, -1000, -1000, 559,
	-1000, 179, -1000, -1000, 10375, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10375, 10815, -1000,
	-1000, -1000, -1000, -1000, 10375, -1000, -1000, 354, 6373, -1000,
	-1000, 738, 256, 256, -1000, -1000, 10815, -1000, -1000, -1000,
	-1000, 572, 10375, -1000, -1000, 360, 3779, -1000, 6821, 1803,
	1803, -1000, -1000, 360, 638, 638, -1000, 638, 649, 640,
	640, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 638, -11,
	638, -12, -1000, 360, 360, 1352, 1700, -1000, 420, 841,
	629, -159, -1000, 256, 6373, -1000, 796, 548, 531, -1000,
	-1000, 5701, 360, 437, 433, 825, -1000, 256, 256, 256,
	10375, 256, 10375, 10375, 10375, 8166, 10375, 825, -1000, -1000,
	-1000, -1000, 2549, -1000, 431, -1000, 638, -1000, -1000, -54,
	861, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -29, 352, -29, 301, -1000, 297, 3041, 3779,
	2795, -1000, 637, -1000, -1000, -1000, -1000, 800, -1000, 256,
	-1000, -1000, 853, 9050, -1000, -1000, 1803, -1000, -1000, 97,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 6821, 6821, -1000, 6821, 6821, 6821, 360, 348, 256,
	793, -1000, 629, -1000, -1000, 65, -1000, -1000, 409, -1000,
	395, 395, 395, 166, -1000, -1000, 132, 10375, -1000, 176,
	-1000, -142, 125, -1000, 125, 438, 421, -1000, -1000, -1000,
	10375, 629, 850, 543, -1000, -1000, 1682, 1682, 1682, 1682,
	42, -1000, -1000, 860, -1000, 629, -1000, 69, 10375, -1000,
	-1000, -1000, -1000, -1000, 132, -1000, 323, 178, 335, -1000,
	270, 792, -1000, 790, -1000, -1000, -1000, -1000, -1000, 384,
	31, 840, 831, -1000, -1000, -1000, -1000, 360, 51, -170,
	10595, 531, 360, -1000, -1000, -1000, 282, -1000, -1000, -1000,
	325, -1000, -1000, 635, 374, -1000, 10375, -1000, 6373, 6373,
	-1000, 737, -165, -175, 524, -1000, -1000, -1000, -167, -1000,
	31, 747, 256, 508, -1000, 730, -1000, -1000, -1000, 23,
	-168, 15, -172, 629, -180, 6597, -1000, 1682, 360, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 1109, 25, 576, 111, 1108, 1104, 1103, 1102, 1101,
	1099, 1096, 1095, 1094, 1089, 1088, 1086, 1085, 1084, 1083,
	1080, 1079, 1078, 1077, 1074, 68, 1073, 1068, 1067, 64,
	1066, 53, 1064, 1063, 33, 158, 35, 43, 598, 1062,
	15, 70, 54, 1061, 47, 1058, 1057, 66, 1056, 57,
	1055, 1054, 1425, 1053, 1052, 10, 19, 1040, 1039, 1037,
	1036, 92, 800, 1032, 1031, 1029, 1026, 1014, 1011, 48,
	9, 7, 13, 12, 1010, 63, 6, 1009, 49, 1008,
	1007, 1006, 1005, 28, 1004, 39, 1002, 34, 36, 29,
	14, 1001, 87, 1000, 51, 27, 20, 4, 65, 59,
	998, 37, 60, 46, 995, 994, 154, 992, 981, 977,
	976, 974, 973, 147, 150, 972, 958, 957, 956, 30,
	156, 552, 732, 62, 954, 949, 932, 1392, 61, 55,
	17, 929, 45, 1317, 42, 928, 927, 31, 926, 925,
	924, 919, 916, 915, 914, 32, 912, 911, 909, 24,
	38, 908, 903, 22, 21, 902, 900, 899, 41, 50,
	898, 44, 895, 894, 892, 891, 23, 11, 890, 8,
	889, 5, 888, 887, 2, 886, 18, 884, 3, 883,
	16, 40, 881, 877, 0, 155, 875, 874, 108,
}

var yyR1 = [...]uint8{
	0, 182, 183, 183, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 3, 3, 3, 7, 4, 5,
	5, 6, 6, 93, 93, 92, 91, 91, 8, 8,
	28, 28, 9, 10, 10, 10, 186, 186, 47, 47,
	94, 94, 11, 11, 11, 11, 99, 99, 103, 103,
	103, 104, 104, 104, 104, 135, 135, 12, 12, 12,
	12, 12, 12, 12, 180, 180, 179, 178, 178, 177,
	177, 176, 17, 163, 164, 164, 164, 159, 138, 138,
	138, 138, 141, 141, 139, 139, 139, 139, 139, 139,
	139, 140, 140, 140, 140, 140, 142, 142, 142, 142,
	142, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 144, 144, 144, 144,
	144, 144, 144, 144, 158, 158, 145, 145, 153, 153,
	154, 154, 154, 151, 151, 152, 152, 155, 155, 155,
	146, 146, 146, 146, 146, 146, 146, 148, 148, 156,
	156, 149, 149, 149, 150, 150, 157, 157, 157, 157,
	157, 147, 147, 160, 160, 172, 172, 171, 171, 171,
	162, 162, 168, 168, 168, 168, 168, 161, 161, 170,
	170, 169, 165, 165, 165, 166, 166, 166, 167, 167,
	167, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 175, 173, 173, 174, 174, 14, 15, 15, 15,
	15, 15, 16, 16, 18, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 111, 111,
	108, 108, 109, 109, 110, 110, 110, 112, 112, 112,
	136, 136, 136, 20, 20, 22, 22, 23, 24, 21,
	21, 21, 21, 21, 187, 25, 26, 26, 27, 27,
	27, 31, 31, 31, 29, 29, 30, 30, 36, 36,
	35, 35, 37, 37, 37, 37, 124, 124, 124, 123,
	123, 39, 39, 40, 40, 41, 41, 42, 42, 42,
	54, 54, 90, 90, 95, 95, 43, 43, 43, 43,
	44, 44, 45, 45, 46, 46, 131, 131, 130, 130,
	130, 129, 129, 48, 48, 48, 50, 49, 49, 49,
	49, 49, 49, 51, 51, 53, 53, 52, 52, 55,
	55, 55, 55, 56, 56, 38, 38, 38, 38, 38,
	38, 38, 107, 107, 58, 58, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 68, 68, 68, 68,
	68, 68, 59, 59, 59, 59, 59, 59, 59, 34,
	34, 69, 69, 69, 75, 70, 70, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 66, 66,
	66, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 65, 65, 65, 65,
	65, 65, 65, 65, 188, 188, 67, 67, 67, 67,
	32, 32, 32, 32, 32, 134, 134, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 79,
	79, 33, 33, 77, 77, 78, 80, 80, 76, 76,
	76, 61, 61, 61, 61, 61, 61, 61, 61, 63,
	63, 63, 81, 81, 82, 82, 83, 83, 84, 84,
	85, 86, 86, 86, 87, 87, 87, 87, 88, 88,
	88, 60, 60, 60, 60, 60, 60, 89, 89, 89,
	89, 96, 96, 71, 71, 73, 73, 72, 74, 97,
	97, 101, 98, 98, 102, 102, 102, 100, 100, 100,
	126, 126, 126, 105, 105, 113, 113, 114, 114, 106,
	106, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 116, 116, 116, 117, 117, 118, 118, 118, 125,
	125, 121, 121, 122, 122, 127, 127, 128, 128, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 184,
	185, 132, 133, 133, 133,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 1, 3, 4, 0, 3, 7, 8,
	1, 1, 8, 8, 7, 6, 1, 1, 1, 3,
	0, 4, 3, 4, 5, 4, 1, 3, 3, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 8, 4,
	6, 5, 5, 5, 0, 2, 1, 0, 2, 1,
	3, 3, 4, 4, 1, 3, 3, 8, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	1, 4, 4, 2, 2, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 1, 0, 1, 0, 1, 2,
	0, 2, 2, 2, 2, 2, 2, 0, 3, 0,
	1, 0, 3, 3, 0, 2, 0, 2, 1, 2,
	1, 0, 2, 5, 4, 1, 2, 2, 3, 2,
	0, 1, 2, 3, 3, 2, 2, 1, 1, 1,
	3, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 6, 7, 7, 12, 7, 7, 7, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 3, 3, 3, 3, 4, 3, 6,
	4, 2, 4, 2, 2, 2, 2, 3, 1, 1,
	0, 1, 0, 1, 0, 2, 2, 0, 2, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	6, 4, 4, 6, 6, 6, 6, 8, 8, 6,
	8, 8, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 1, 2, 1, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -182, -1, -2, -7, -8, -9, -10, -11, -12,
	-13, -14, -15, -16, -18, -19, -20, -22, -23, -24,
	-21, 247, -3, 7, -28, 9, 10, 30, -17, 113,
	114, 116, 115, 141, 117, 134, 49, 153, 154, 156,
	157, 25, 135, 136, 139, 140, -4, -5, 6, 8,
	236, -184, 53, -183, 251, -93, -92, -127, 56, -120,
	244, 153, 164, 158, 185, 177, 175, 178, 215, 66,
	156, 224, 137, 173, 169, 167, 27, 190, 249, 168,
	132, 131, 191, 195, 216, 162, 163, 218, 189, 133,
	32, 246, 34, 145, 219, 193, 188, 184, 187, 161,
	183, 38, 197, 196, 198, 214, 180, 170, 18, 222,
	140, 143, 192, 194, 127, 147, 248, 220, 166, 144,
	139, 223, 157, 217, 226, 37, 202, 160, 59, 130,
	154, 151, 181, 146, 171, 172, 186, 159, 182, 155,
	148, 141, 225, 203, 250, 179, 176, 152, 122, 149,
	150, 207, 208, 209, 210, 221, 174, 204, -25, -187,
	-25, -25, -25, -25, -163, 53, -118, 122, 71, 149,
	228, 119, 120, 126, -121, 56, -120, -106, 122, 124,
	120, 120, 121, 122, 228, 119, 120, -52, -127, 120,
	107, 178, 113, 205, 121, 32, 147, -136, 120, -108,
	150, 207, 208, 209, 210, 56, 217, 216, 211, -127,
	155, -132, -132, -132, -132, -132, -83, 15, -27, 5,
	-25, -2, -3, 54, -91, -184, -37, 98, -38, -127,
	-57, 73, -62, 29, 56, -120, 23, -61, -58, -76,
	-74, -75, 107, 108, 96, 97, 104, 74, 109, -66,
	-64, -65, -67, 58, 57, 67, 60, 61, 62, 63,
	68, 69, 70, -121, -72, -184, 43, 44, 237, 238,
	239, 240, 243, 241, 76, 33, 227, 235, 234, 233,
	231, 232, 229, 230, 125, 228, 102, 236, -26, -106,
	-40, -41, -42, -43, -54, -75, -184, -52, 11, -47,
	-52, -98, -135, 155, -102, 217, 216, -122, -100, -121,
	-119, 215, 178, 214, 118, 72, 22, 24, 200, 75,
	107, 16, 76, 106, 237, 113, 47, 229, 230, 227,
	239, 240, 228, 205, 29, 10, 25, 135, 21, 100,
	115, 79, 80, 138, 23, 136, 70, 19, 50, 11,
	13, 14, 125, 124, 91, 121, 45, 8, 109, 26,
	88, 41, 28, 43, 89, 17, 231, 232, 31, 243,
	142, 102, 48, 35, 73, 68, 51, 71, 15, 46,
	90, 116, 236, 44, 119, 6, 242, 30, 134, 42,
	120, 206, 78, 123, 69, 5, 126, 9, 49, 52,
	233, 234, 235, 33, 77, 12, -164, -159, 56, 121,
	-52, 236, -121, -114, 125, -114, -114, 120, -52, -52,
	-113, 125, 56, -113, -113, -113, -52, 110, -52, 56,
	30, 228, 56, 147, 120, 148, 122, -133, -184, -122,
	-133, -133, -133, 151, 152, -133, -109, 212, 51, -133,
	-87, 17, 16, -6, -4, -184, 6, 20, 21, -31,
	39, 40, -185, 55, -92, 22, -89, -121, 11, -124,
	72, 71, 88, -123, 22, -121, 58, 110, -38, -127,
	-59, 91, 73, 89, 90, 75, 93, 92, 103, 96,
	97, 98, 99, 100, 101, 102, 94, 95, 106, 81,
	82, 83, 84, 85, 86, 87, -107, -184, -75, -184,
	111, 112, -62, -62, -62, -62, -62, -62, -62, -184,
	-2, -70, -38, -184, -184, -184, -184, -184, -184, -184,
	-184, -184, -79, -38, -184, -188, -184, -188, -188, -188,
	-188, -188, -188, -188, -184, -184, -184, -184, 65, -53,
	26, -52, 30, 54, -48, -50, -49, -51, 41, 45,
	47, 42, 43, 44, 212, 48, -131, 22, -40, -184,
	-130, 143, -129, 22, -127, 58, -52, -47, -186, 54,
	11, 52, 54, -98, 155, -99, -103, 218, 220, 81,
	-126, -121, 58, 29, 30, 55, 54, -138, -141, -143,
	-142, -144, -139, -140, 175, 176, 107, 179, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 190, 30, 137,
	171, 172, 173, 174, 191, 192, 193, 194, 195, 196,
	197, 198, 158, 159, 160, 161, 162, 163, 164, 166,
	167, 168, 169, 170, 56, -133, 122, -180, 52, 56,
	73, 56, -52, -52, -133, 123, -52, 23, 51, -52,
	56, 56, -128, -127, -119, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -111, 206, 213, -52, -88,
	19, 31, -38, -84, -85, -38, -83, -2, -25, 35,
	-29, 21, -75, -185, 54, 110, -52, -38, -38, -68,
	68, 73, 69, 70, -123, 98, -128, -122, -119, 110,
	-62, -69, -72, -75, 64, 91, 89, 90, 75, -62,
	-62, -62, -62, -62, -62, -62, -62, -62, -62, -62,
	-62, -62, -62, -62, -134, 56, 58, 56, -61, -61,
	-121, -36, 21, -35, -37, -185, 54, -185, -2, -35,
	-35, -38, -38, -76, -121, -127, -76, -35, -29, -77,
	-78, 77, -76, -185, -35, -36, -35, -35, -94, 143,
	-52, -97, -101, -76, -41, -42, -42, -41, -42, 41,
	41, 41, 46, 41, 46, 41, 46, 41, -49, -127,
	-185, -55, 49, 124, 50, -184, -129, -94, 52, -40,
	-52, -102, -99, 54, 219, 221, 222, 51, -38, -150,
	106, -165, -166, -167, -122, 58, 60, -159, -160, -168,
	127, 130, 126, -161, 121, 28, -155, 68, 73, -151,
	203, -145, 53, -145, -145, -145, -145, -149, 178, -149,
	-149, -149, 53, 53, -145, -145, -145, -153, 53, -153,
	-153, -154, 53, -154, -125, 52, -52, -178, 247, -179,
	56, -133, 23, -133, -115, 118, 115, 116, -175, 114,
	200, 178, 66, 29, 15, 237, 143, 250, 56, 144,
	-52, -52, -133, -110, 11, 91, 9, 91, 54, 18,
	54, -86, 24, 25, -87, -185, -31, -63, -121, 60,
	63, -30, 42, -121, -121, 68, 69, 70, 110, -184,
	-128, -69, -62, -62, -62, -34, 138, 72, -185, -185,
	-35, 54, -38, -185, -185, -185, 54, 52, 22, 54,
	11, 110, 54, 11, -185, -35, -80, -78, 79, -38,
	-185, -185, -185, -185, -185, -60, 30, 33, -2, -184,
	-184, -56, 54, 12, 81, -45, -44, 51, 52, -46,
	51, -44, 41, 41, 41, 121, 121, 121, -95, -121,
	-56, -40, -56, -103, -104, 223, 220, 226, 56, 54,
	-167, 81, 53, 28, -161, -161, 56, 56, -146, 29,
	68, -152, 204, 60, -149, -149, -150, 30, -150, -150,
	-150, -158, 58, -158, 60, 60, 51, -121, -133, -177,
	-176, -122, -132, -181, 149, 128, 129, 132, 131, 56,
	121, 28, 127, 130, 143, 126, -181, 149, -116, -117,
	123, 22, 121, 28, 143, -133, -112, 89, 12, -127,
	-127, 37, -38, -38, -85, -88, -105, 19, 11, 33,
	33, -35, 110, 98, -122, -36, 110, -34, 72, -62,
	-62, -185, -37, -137, 107, 175, 137, 173, 169, 168,
	167, 159, 160, 161, 162, 163, 164, 189, 180, 202,
	171, 203, 59, -134, -137, -62, -62, -122, -62, -62,
	244, -83, 80, -38, 78, -96, 51, -97, -71, -73,
	-72, -184, -2, -89, -95, -83, -101, -38, -38, -38,
	53, -38, -184, -184, -184, -185, 54, -83, -56, 220,
	224, 225, -166, -167, -170, -169, -121, 56, 56, -148,
	51, 58, 60, 61, 68, 227, 67, 55, -150, -150,
	56, 107, 55, 54, 55, 54, 55, 54, -52, 54,
	81, -132, -121, -132, -121, -52, -132, -121, 58, -38,
	38, -52, -39, 11, -121, -185, -62, -185, -145, -145,
	-145, -154, -153, -153, -145, 163, -145, 163, -185, -185,
	-185, 54, 19, -185, 54, 19, -184, -33, 242, -38,
	27, -96, 54, -185, -185, -185, -185, -87, -90, -121,
	-90, -90, -90, -130, -121, -87, 55, 54, -145, -156,
	200, 9, -149, 58, -149, 60, 60, -133, -176, -167,
	53, 26, -56, -40, -149, 56, -62, -62, -62, -62,
	-62, -185, 58, 28, -73, 33, -2, -184, 54, 55,
	-185, -185, -185, -55, -172, -171, 52, 133, 66, -169,
	-157, 127, 28, 126, 227, -150, -150, 55, 55, -90,
	-184, -81, 13, -185, -185, -185, -185, -32, 91, 247,
	9, -71, -2, -121, -171, 56, -162, 81, 58, -147,
	66, 28, 28, 55, -173, -174, 143, -82, 14, 16,
	-185, 245, 48, 248, -97, -185, 60, 58, -180, -185,
	54, -121, -38, -70, 38, 246, 249, -178, -174, 33,
	38, 145, 247, 146, 248, -184, 249, -62, 142, -185,
	-185,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 0, -2, 284, 284, 284, 284, 284, 0, 596,
	579, 0, 0, 0, 0, -2, 274, 275, 0, 277,
	278, 801, 801, 801, 801, 801, 526, 0, 284, 40,
	41, 0, 799, 1, 3, 0, 33, 36, 605, 606,
	701, 702, 703, 704, 705, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 0, 286,
	579, 0, 0, 0, 67, 0, 0, 789, 0, 790,
	577, 577, 577, 597, 598, 601, 602, 0, 0, 580,
	0, 575, 0, 575, 575, 575, 0, 233, 357, 0,
	0, 0, 0, 802, 802, 802, 802, 0, 802, 262,
	251, 253, 254, 255, 256, 802, 271, 272, 261, 273,
	276, 279, 280, 281, 282, 283, 534, 0, 0, 288,
	291, 0, -2, 0, 0, 0, 0, 302, 306, 0,
	365, 0, 370, 372, -2, -2, 0, 407, 408, 409,
	410, 411, 0, 0, 0, 0, 0, 0, 0, 434,
	435, 436, 437, 511, 512, 513, 514, 515, 516, 517,
	518, 374, 375, 508, 558, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 499, 0, 464, 464, 464, 464,
	464, 464, 464, 464, 0, 0, 0, 0, 285, 0,
	0, 313, 315, 316, 317, 336, 0, 338, 0, 0,
	48, 52, 0, 780, 562, -2, -2, 0, 0, 603,
	604, -2, 708, -2, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 618, 619, 620, 621, 622, 623, 624,
	625, 626, 627, 628, 629, 630, 631, 632, 633, 634,
	635, 636, 637, 638, 639, 640, 641, 642, 643, 644,
	645, 646, 647, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 657, 658, 659, 660, 661, 662, 663, 664,
	665, 666, 667, 668, 669, 670, 671, 672, 673, 674,
	675, 676, 677, 678, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 689, 690, 691, 692, 693, 694,
	695, 696, 697, 698, 699, 700, 0, 84, 0, 0,
	802, 0, 74, 0, 0, 0, 0, 0, 802, 0,
	0, 0, 0, 0, 0, 0, 232, 0, 234, 802,
	802, 802, 802, 802, 802, 802, 802, 243, 803, 804,
	244, 245, 246, 802, 802, 248, 0, 263, 0, 257,
	538, 0, 0, 526, 31, 0, 284, 289, 290, 294,
	292, 293, 30, 800, 34, 0, 0, 547, 0, 303,
	0, 0, 0, 307, 0, 309, 310, 0, 368, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 392,
	393, 394, 395, 396, 397, 398, 371, 0, 385, 0,
	0, 0, 427, 428, 429, 430, 431, 432, 0, 298,
	0, 0, 405, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 0, 500, 0, 456, 0, 457, 458, 459,
	460, 461, 462, 463, 0, 298, 0, 0, 287, 50,
	0, 356, 0, 0, 0, 0, 0, 0, 343, 0,
	0, 346, 0, 0, 0, 0, 0, 337, 0, 0,
	359, 752, 339, 0, 341, 342, -2, 0, 0, 0,
	46, 47, 0, 53, 780, 55, 56, 0, 0, 0,
	164, 570, 571, 572, 568, 192, 0, 147, 143, 89,
	90, 91, 136, 93, 136, 136, 136, 136, 161, 161,
	161, 161, 119, 120, 121, 122, 123, 0, 0, 106,
	136, 136, 136, 110, 126, 127, 128, 129, 130, 131,
	132, 133, 94, 95, 96, 97, 98, 99, 100, 138,
	138, 138, 140, 140, 599, 69, 0, 77, 0, 802,
	0, 802, 82, 0, 208, 0, 227, 576, 0, 802,
	230, 231, 358, 607, 608, 235, 236, 237, 238, 239,
	240, 241, 242, 247, 250, 264, 258, 259, 252, 24,
	0, 0, 535, 527, 528, 531, 534, 0, 291, 0,
	296, 295, 35, 37, 0, 0, 27, 366, 367, 369,
	386, 0, 388, 390, 308, 304, 0, 509, -2, 0,
	376, 377, 401, 402, 403, 0, 0, 0, 0, 399,
	381, 0, 412, 413, 414, 415, 416, 417, 418, 419,
	420, 421, 422, 423, 426, 475, 476, 0, 424, 425,
	433, 0, 0, 299, 300, 404, 0, 557, 0, 0,
	0, 0, 0, 0, 508, 0, 0, 0, 0, 506,
	503, 0, 0, 465, 0, 0, 0, 0, 0, 0,
	355, 363, 559, 0, 314, 332, 334, 0, 329, 344,
	345, 347, 0, 349, 0, 351, 0, 353, 354, 318,
	319, 320, 0, 0, 0, 0, 340, 363, 0, 363,
	49, 563, 54, 0, 0, 59, 60, 564, 565, 566,
	0, 83, 193, 195, 198, 199, 200, 85, 86, 0,
	0, 0, 0, 0, 187, 188, 150, 148, 0, 145,
	144, 92, 0, 161, 161, 113, 114, 164, 0, 164,
	164, 164, 0, 0, 107, 108, 109, 101, 0, 102,
	103, 104, 0, 105, 0, 0, 802, 71, 0, 75,
	76, 72, 578, 73, 801, 0, 0, 591, 209, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 590, 0,
	226, 802, 229, 267, 0, 0, 539, 0, 0, 0,
	0, 530, 532, 533, 538, 32, 294, 0, 519, 0,
	0, 0, 297, 549, 548, 387, 389, 391, 0, 298,
	0, 378, 399, 382, 0, 379, 0, 0, 373, 438,
	0, 0, 406, -2, 441, 442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 0, 504, 0, 0,
	455, 466, 467, 468, 469, 551, 0, 0, 542, 0,
	0, 526, 0, 0, 0, 326, 333, 0, 0, 327,
	0, 328, 348, 350, 352, 0, 0, 0, 0, 324,
	526, 363, 45, 57, 58, 0, 0, 64, 165, 0,
	196, 0, 0, 182, 0, 0, 185, 186, 157, 0,
	149, 88, 146, 0, 164, 164, 115, 0, 116, 117,
	118, 0, 134, 0, 0, 0, 0, 600, 70, 78,
	79, 0, 201, 801, 0, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 801, 0, 0, 801,
	592, 593, 594, 595, 0, 228, 249, 0, 0, 265,
	266, 0, 536, 537, 529, 25, 0, 573, 574, 520,
	521, 311, 0, 305, 510, 0, 0, 380, 0, 400,
	383, 439, 301, 0, 136, 136, 480, 136, 140, 138,
	138, 485, 486, 487, 488, 489, 490, 491, 136, 493,
	136, 496, 498, 0, 0, 0, 0, 509, 0, 0,
	0, 501, 454, 507, 0, 38, 0, 551, 541, 553,
	555, 0, 0, 0, 0, 534, 560, 364, 561, 330,
	0, 335, 0, 0, 0, 338, 0, 534, 44, 61,
	62, 63, 194, 197, 0, 189, 136, 183, 184, 159,
	0, 151, 152, 153, 154, 155, 156, 137, 111, 112,
	162, 163, 161, 0, 161, 0, 141, 0, 802, 0,
	0, 202, 0, 203, 205, 206, 207, 0, 268, 269,
	540, 26, 363, 0, 550, 440, 384, 443, 477, 161,
	481, 482, 483, 484, 492, 494, 495, 497, 445, 444,
	446, 0, 0, 449, 0, 0, 0, 0, 0, 505,
	0, 39, 0, 556, -2, 0, 51, 42, 0, 322,
	0, 0, 0, 359, 325, 43, 174, 0, 191, 166,
	160, 0, 164, 135, 164, 0, 0, 68, 80, 81,
	0, 0, 522, 312, 478, 479, 0, 0, 0, 0,
	470, 453, 502, 0, 554, 0, 545, 0, 0, 331,
	360, 361, 362, 321, 173, 175, 0, 180, 0, 190,
	171, 0, 168, 170, 158, 124, 125, 139, 142, 0,
	0, 524, 0, 447, 448, 450, 451, 0, 0, 0,
	0, 544, 0, 323, 176, 177, 0, 181, 179, 87,
	0, 167, 169, 74, 0, 222, 0, 28, 0, 0,
	452, 0, 0, 0, 552, -2, 178, 172, 77, 221,
	0, 0, 525, 523, 471, 0, 474, 204, 223, 0,
	472, 0, 0, 0, 0, 0, 473, 0, 0, 224,
	225,
}

var yyTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 251,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:306
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:311
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:312
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:316
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:339
		{
			yyVAL.selStmt = &With{CTEs: yyDollar[2].commonTableExprs, Stmt: yyDollar[3].selStmt}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:343
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:349
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:357
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:361
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:367
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:374
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:380
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:384
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:390
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:394
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:400
		{
			yyVAL.commonTableExprs = CommonTableExprs{yyDollar[1].commonTableExpr}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:404
		{
			yyVAL.commonTableExprs = append(yyDollar[1].commonTableExprs, yyDollar[3].commonTableExpr)
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:410
		{
			yyVAL.commonTableExpr = &CommonTableExpr{Name: yyDollar[1].tableIdent, Columns: yyDollar[2].columns, Subquery: yyDollar[4].subquery}
		}
	case 36:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:415
		{
			yyVAL.columns = nil
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:419
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:426
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:438
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:450
		{
			yyVAL.str = InsertStr
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:454
		{
			yyVAL.str = ReplaceStr
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:460
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:466
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:470
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:474
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:479
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:480
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:484
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:488
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:493
		{
			yyVAL.partitions = nil
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:497
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:503
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:507
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:511
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:515
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:521
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:525
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:531
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:535
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:539
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:545
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:549
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:553
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:557
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:563
		{
			yyVAL.str = SessionStr
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:567
		{
			yyVAL.str = GlobalStr
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:573
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 68:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:578
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:583
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 70:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:587
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:591
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:599
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:603
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:608
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:612
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:618
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:623
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:628
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:634
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:639
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:645
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:651
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:658
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:665
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:670
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:674
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:680
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:691
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:702
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:707
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:899
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:904
		{
			yyVAL.optVal = nil
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:908
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:913
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:917
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:925
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:929
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:935
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:943
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:947
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:952
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:956
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:962
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:966
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:970
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:975
		{
			yyVAL.optVal = nil
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:979
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:983
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:987
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:991
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:995
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:999
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1004
		{
			yyVAL.optVal = nil
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1008
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1013
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1017
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1022
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1026
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1030
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1035
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1039
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1044
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1048
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1052
		{
			yyVAL.colKeyOpt = colKey
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1056
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1060
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1065
		{
			yyVAL.optVal = nil
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1069
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1075
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1079
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1085
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1089
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1095
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1099
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1104
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1110
		{
			yyVAL.str = ""
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1114
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1120
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1124
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1128
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1132
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1136
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1142
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1146
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1152
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1156
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1162
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1167
		{
			yyVAL.str = ""
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1171
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1175
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1183
		{
			yyVAL.str = yyDollar[1].str
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1187
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1191
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1197
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1201
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1205
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1211
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 202:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1215
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1219
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 204:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1223
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 205:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1236
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 206:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1246
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 207:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1251
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1256
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 209:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1260
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1279
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1285
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1289
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 224:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1295
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 225:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1299
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1305
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1311
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 228:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1319
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1324
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1332
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1336
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1342
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1346
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1351
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1357
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1361
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1365
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1370
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1374
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1378
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1382
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1386
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1390
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1394
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1398
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1402
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1406
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1414
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1424
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1428
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1432
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1436
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1440
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1444
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1448
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1458
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1464
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1468
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1474
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1478
		{
			yyVAL.str = "extended "
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1484
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1488
		{
			yyVAL.str = "full "
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1494
		{
			yyVAL.str = ""
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1498
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1502
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1508
		{
			yyVAL.showFilter = nil
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1512
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1516
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1522
		{
			yyVAL.str = ""
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1526
		{
			yyVAL.str = SessionStr
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1530
		{
			yyVAL.str = GlobalStr
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1536
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1540
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &Begin{}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &Begin{}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1556
		{
			yyVAL.statement = &Commit{}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1562
		{
			yyVAL.statement = &Rollback{}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1568
		{
			yyVAL.statement = &OtherRead{}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1572
		{
			yyVAL.statement = &OtherRead{}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1576
		{
			yyVAL.statement = &OtherRead{}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1580
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1584
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1589
		{
			setAllowComments(yylex, true)
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1593
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1599
		{
			yyVAL.bytes2 = nil
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1603
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1609
		{
			yyVAL.str = UnionStr
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1613
		{
			yyVAL.str = UnionAllStr
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1617
		{
			yyVAL.str = UnionDistinctStr
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1622
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1626
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1630
		{
			yyVAL.str = SQLCacheStr
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1635
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1639
		{
			yyVAL.str = DistinctStr
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1644
		{
			yyVAL.str = ""
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1648
		{
			yyVAL.str = StraightJoinHint
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1653
		{
			yyVAL.selectExprs = nil
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1657
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1663
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1667
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1673
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1677
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1681
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1685
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1690
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1694
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1698
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1705
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1710
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1714
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1720
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1724
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1734
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1738
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1742
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1748
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 321:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1752
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1758
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1762
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1768
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1772
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1785
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1789
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1793
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1797
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1803
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1805
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1809
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1811
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1815
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1817
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1820
		{
			yyVAL.empty = struct{}{}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1822
		{
			yyVAL.empty = struct{}{}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1825
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1829
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1833
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1840
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1846
		{
			yyVAL.str = JoinStr
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1850
		{
			yyVAL.str = JoinStr
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1854
		{
			yyVAL.str = JoinStr
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1860
		{
			yyVAL.str = StraightJoinStr
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1866
		{
			yyVAL.str = LeftJoinStr
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1870
		{
			yyVAL.str = LeftJoinStr
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1874
		{
			yyVAL.str = RightJoinStr
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1878
		{
			yyVAL.str = RightJoinStr
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1882
		{
			yyVAL.str = FullOuterJoinStr
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1886
		{
			yyVAL.str = FullOuterJoinStr
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1892
		{
			yyVAL.str = NaturalJoinStr
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1896
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1906
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1910
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1916
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1920
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1925
		{
			yyVAL.indexHints = nil
		}
	case 360:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1929
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 361:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1933
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 362:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1937
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1942
		{
			yyVAL.expr = nil
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1946
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1952
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1956
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1960
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1964
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1968
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1972
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1976
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1982
		{
			yyVAL.str = ""
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1986
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1992
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1996
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2002
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2006
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2010
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2014
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2018
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2022
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2026
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2030
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 384:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2034
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2038
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2044
		{
			yyVAL.str = IsNullStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2048
		{
			yyVAL.str = IsNotNullStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2052
		{
			yyVAL.str = IsTrueStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2056
		{
			yyVAL.str = IsNotTrueStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2060
		{
			yyVAL.str = IsFalseStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2064
		{
			yyVAL.str = IsNotFalseStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2070
		{
			yyVAL.str = EqualStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2074
		{
			yyVAL.str = LessThanStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2078
		{
			yyVAL.str = GreaterThanStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2082
		{
			yyVAL.str = LessEqualStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2086
		{
			yyVAL.str = GreaterEqualStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2090
		{
			yyVAL.str = NotEqualStr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2094
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2099
		{
			yyVAL.expr = nil
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2103
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2109
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2113
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2117
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2123
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2129
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2133
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2139
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2143
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2147
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2151
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2155
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2159
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2163
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2167
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2171
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2175
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2179
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2183
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2187
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2191
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2195
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2199
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2203
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2207
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2211
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2215
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2219
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2223
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2227
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2235
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2249
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2253
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2257
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2275
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 439:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2279
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 440:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2283
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2293
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2297
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 443:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2301
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2305
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType, Cast: true}
		}
	case 445:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2309
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 446:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2313
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 447:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2317
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 448:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2321
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 449:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2325
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 450:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2329
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 451:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2333
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 452:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2337
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 453:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2341
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 454:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2345
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2349
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2359
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2363
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2367
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2371
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2376
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2381
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2386
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2391
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2405
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2409
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2413
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2417
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2423
		{
			yyVAL.str = ""
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2427
		{
			yyVAL.str = BooleanModeStr
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2431
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 473:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2435
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2439
		{
			yyVAL.str = QueryExpansionStr
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2445
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2449
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2455
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2459
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2463
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2467
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2471
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2475
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2481
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2487
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2493
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2497
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2501
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2505
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2509
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2513
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2517
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2521
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2525
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2529
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2533
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2537
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2541
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2545
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2550
		{
			yyVAL.expr = nil
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2554
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2559
		{
			yyVAL.str = string("")
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2563
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2569
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2573
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2579
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2584
		{
			yyVAL.expr = nil
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2588
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2594
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2598
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 510:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2602
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2608
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2612
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2616
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2620
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2624
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2628
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2632
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2636
		{
			yyVAL.expr = &NullVal{}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2642
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2651
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2655
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2660
		{
			yyVAL.exprs = nil
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2664
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2669
		{
			yyVAL.expr = nil
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2673
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2678
		{
			yyVAL.orderBy = nil
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2682
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2688
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2692
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2698
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2703
		{
			yyVAL.str = AscScr
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2707
		{
			yyVAL.str = AscScr
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2711
		{
			yyVAL.str = DescScr
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2716
		{
			yyVAL.limit = nil
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2720
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2724
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2728
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2733
		{
			yyVAL.str = ""
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2737
		{
			yyVAL.str = ForUpdateStr
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2741
		{
			yyVAL.str = ShareModeStr
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2754
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2758
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2762
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2767
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2771
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 546:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2775
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2782
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2786
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2790
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2794
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2799
		{
			yyVAL.updateExprs = nil
		}
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2803
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2809
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2813
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2819
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2823
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2829
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2835
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2845
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2849
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2855
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2861
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2865
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2871
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2875
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2879
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2886
		{
			yyVAL.bytes = []byte("charset")
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2893
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2897
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2901
		{
			yyVAL.expr = &Default{}
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2910
		{
			yyVAL.byt = 0
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2912
		{
			yyVAL.byt = 1
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2915
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2917
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2920
		{
			yyVAL.str = ""
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2922
		{
			yyVAL.str = IgnoreStr
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2926
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2928
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2930
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2932
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2934
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2936
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2938
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2940
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2942
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2944
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2947
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2949
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2951
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2955
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2957
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2960
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2962
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2964
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2967
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2969
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2973
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2977
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2984
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2990
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2994
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3001
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3217
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3226
		{
			decNesting(yylex)
		}
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3231
		{
			forceEOF(yylex)
		}
	case 802:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3236
		{
			forceEOF(yylex)
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3240
		{
			forceEOF(yylex)
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3244
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
